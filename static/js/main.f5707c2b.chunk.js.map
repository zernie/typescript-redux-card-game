{"version":3,"sources":["models/Player.ts","models/constants.ts","models/enums.ts","models/Character.ts","models/Game.ts","models/Hero.ts","models/Minion.ts","models/Weapon.ts","UI/assets/images/cardback.png","models/Entity.ts","models/index.ts","redux/modules/play/actions.ts","redux/utils/index.ts","redux/modules/play/minionReducer.ts","redux/modules/play/heroReducer.ts","redux/modules/deckReducer.ts","redux/modules/initialState.ts","redux/modules/gameStateReducer.ts","redux/modules/play/characterReducer.ts","UI/hooks.ts","UI/components/AbilityList.tsx","UI/components/CardArt.tsx","UI/components/Card.tsx","UI/components/CardBack.tsx","UI/components/Weapon.tsx","UI/components/Hero.tsx","UI/components/Sleep.tsx","UI/components/Minion.tsx","UI/Play/DnDMinion.tsx","UI/Play/Side.tsx","UI/Play/NextTurn.tsx","UI/Deck/Deck.tsx","UI/EndGameScreen.tsx","redux/modules/handReducer.ts","UI/Hand/DnDCard.tsx","UI/Hand/Hand.tsx","UI/Play/DnDHero.tsx","UI/Play/Battlefield.tsx","UI/App.tsx","redux/modules/play/playerReducer.ts","redux/modules/play/weaponReducer.ts","redux/modules/play/playReducer.ts","redux/modules/rootReducer.ts","redux/modules/graveyardReducer.ts","redux/modules/secretReducer.ts","redux/modules/setAsideReducer.ts","index.tsx","redux/configureStore.ts","models/utils.ts","models/Card.ts"],"names":["craftPlayer","props","id","fatigue","mana","maximumMana","name","playState","PlayState","Playing","zone","Zone","Play","type","CardType","Player","craftOpponent","canSpendMana","player","amount","otherId","state","activePlayer","playerID","opponentID","getActivePlayer","game","play","getPlayer","getOpponent","hasLost","Lost","MAX_MANA","MAX_HEALTH","MAX_CARDS_IN_HAND","PLAYABLE_CARDS","Minion","Weapon","Hero","Spell","Ability","BlockType","CardClass","Step","EntityType","PlayReq","Race","PowerArea","TargetingType","TriggerType","TriggerSource","TriggerActivation","SequenceType","PlayType","getCharacters","entities","_","pickBy","isCharacter","getCharactersById","container","ids","pick","canAttack","character","isHero","weaponID","attack","exhausted","shouldExhaust","maxAttacks","hasWindfury","attacksPerformed","isGameOver","step","FinalGameOver","craftHero","abilities","armor","cost","destroyed","health","maxHealth","newId","cardClass","Neutral","reduceArmor","hero","damage","Math","max","reduceHealth","min","getPlayerHero","playerHeroID","getOpponentHero","opponentHeroID","selectMinions","curry","controller","whereEq","owner","playerMinions","opponentMinions","craftMinion","race","Blank","craftMinions","entitiesFrom","map","minionsFromContainer","ownerMinions","minions","isValidTarget","characters","any","hasTaunt","anyTaunts","craftWeapon","craftWeapons","getWeapon","module","exports","array","indexBy","prop","entity","isMinion","isWeapon","attackCharacter","createAction","dealDamage","exhaust","destroyWeapon","equipWeapon","gainMana","restoreMana","spendMana","summonMinion","processDeaths","fatigueDamage","getEntity","handler","action","payload","createReducer","omitBy","heroId","weapon","dmg","drawCard","burnCard","opponent","playerHero","Shaman","cardID","opponentHero","Hunter","heroID","handMinions","Charge","Hand","Windfury","Taunt","handWeapons","durability","hand","initialState","deck","Deck","graveyard","secret","setAside","sample","BeginFirst","turn","finishGame","nextTurn","checkForEndGame","dispatch","getState","performAttack","target","source","attacker","characterReducer","char","chars","forEach","damageHeroHandler","damageMinionHandler","reduceReducers","minionReducer","heroReducer","useGame","useSelector","AbilityList","list","length","List","verticalAlign","ability","i","Item","key","Label","color","horizontal","CardArt","resolution","Image","circular","src","defaultProps","Card","card","active","text","Popup","trigger","Header","Segment","basic","vertical","disabled","alt","size","centered","attached","content","CardBack","Img","width","tertiary","header","Statistic","value","isOver","Grid","Column","computer","tablet","mobile","raised","style","padding","undefined","Group","widths","label","Sleep","compact","Transition","visible","animation","duration","floating","DnDMinion","useDispatch","useDrop","accept","drop","monitor","canDrop","enemyMinions","collect","dropRef","useDrag","item","canDrag","dragRef","ref","Side","board","minHeight","as","relaxed","minion","NextTurn","onClick","Button","fluid","positive","deckColor","EndGameScreen","open","Modal","align","endGameHeader","playCard","DnDCard","drag","Content","DnDHero","Battlefield","isPlayer","isOpponent","playerDeck","opponentDeck","playerHand","opponentHand","console","warn","hasCharge","alert","Error","playerUseCard","canUseCard","dimmer","className","classNames","Divider","section","margin","stretched","values","selectCards","topCard","Toastr","error","timeOut","App","GridRow","GridColumn","Container","textAlign","href","DndProvider","backend","HTML5Backend","destroyedHeroes","filter","weaponReducer","playerReducer","deckReducer","handReducer","playReducer","gameStateReducer","store","configureStore","reducer","rootReducer","preloadedState","ReactDOM","document","getElementById","_lastId","Date","getTime","cards","hasAbility","contains"],"mappings":"obAuBO,MAAMA,EAAc,eAACC,EAAD,uDAA2B,GAA3B,oBAEvBC,GAAI,EACJC,QAAS,EACTC,KAAM,EACNC,YAAa,EACbC,KAAM,SACNC,UAAWC,IAAUC,QACrBC,KAAMC,IAAKC,MACRX,EAToB,CAUvBY,KAAMC,IAASC,UAGNC,EAAgB,eAACf,EAAD,uDAA2B,GAA3B,oBAEzBC,GAAI,EACJC,QAAS,EACTC,KAAM,EACNE,KAAM,WACND,YAAa,EACbE,UAAWC,IAAUC,QACrBC,KAAMC,IAAKC,MACRX,EATsB,CAUzBY,KAAMC,IAASC,UAGNE,EAAe,CAACC,EAAgBC,IAC3CD,EAAOd,KAAOe,GAAU,EAEbC,EAAWC,GACtBA,EAAMC,eAAiBD,EAAME,SAAWF,EAAMG,WAAaH,EAAME,SAItDE,EAAmBC,GAC9BA,EAAKC,KAAKD,EAAKL,MAAMC,cAEVM,EAAaF,GACxBA,EAAKC,KAAKD,EAAKL,MAAME,UAEVM,EAAeH,GAC1BA,EAAKC,KAAKD,EAAKL,MAAMG,YAEVM,EAAWZ,GAAmBA,EAAOX,YAAcC,IAAUuB,M,iCClE1E,oJAEO,MAAMC,EAAW,GACXC,EAAa,GACbC,EAAoB,GACpBC,EAAiB,CAC5BrB,IAASsB,OACTtB,IAASuB,OACTvB,IAASwB,KACTxB,IAASyB,Q,gCCPJ,IAAKC,EAwBAC,EAiBAC,EAgBA5B,EAiBAN,EAaAmC,EAqBAhC,EAWAiC,EA+KAC,EAoGAC,EA+CAC,EA+HAC,EAYAC,EAkGAC,EAwBAC,EAUAC,EAWAC,EArtBZ,8O,SAEYb,K,cAAAA,E,sBAAAA,E,gBAAAA,E,uBAAAA,E,cAAAA,E,kBAAAA,E,0BAAAA,E,oBAAAA,E,6BAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,kBAAAA,E,oBAAAA,E,sBAAAA,E,cAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,cAAAA,E,qBAAAA,M,cAwBAC,K,gBAAAA,E,cAAAA,E,wBAAAA,E,cAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,YAAAA,E,kBAAAA,E,gBAAAA,E,yBAAAA,E,uBAAAA,E,yBAAAA,E,iBAAAA,M,cAiBAC,K,kBAAAA,E,0BAAAA,E,cAAAA,E,gBAAAA,E,YAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,eAAAA,E,mBAAAA,M,cAgBA5B,K,gBAAAA,E,gBAAAA,E,YAAAA,E,0BAAAA,E,cAAAA,E,uBAAAA,E,iBAAAA,M,cAiBAN,K,kBAAAA,E,kBAAAA,E,UAAAA,E,YAAAA,E,aAAAA,M,cAaAmC,K,kBAAAA,E,yBAAAA,E,6BAAAA,E,uBAAAA,E,+BAAAA,E,uBAAAA,E,uBAAAA,E,6BAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,2BAAAA,E,+BAAAA,E,2BAAAA,E,yCAAAA,M,cAqBAhC,K,kBAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,sBAAAA,E,kCAAAA,E,oBAAAA,E,iBAAAA,M,cAWAiC,K,kBAAAA,E,cAAAA,E,gBAAAA,E,gBAAAA,E,YAAAA,E,uBAAAA,E,4BAAAA,E,2BAAAA,E,2BAAAA,E,kCAAAA,E,uBAAAA,E,YAAAA,E,YAAAA,E,kBAAAA,E,kBAAAA,E,mCAAAA,E,kBAAAA,E,iBAAAA,E,iBAAAA,E,iBAAAA,E,uBAAAA,E,uBAAAA,E,kBAAAA,E,mCAAAA,E,UAAAA,E,2BAAAA,E,gBAAAA,E,qBAAAA,E,wBAAAA,E,yCAAAA,E,sBAAAA,E,gBAAAA,E,wBAAAA,E,6BAAAA,E,uBAAAA,M,cA+KAC,O,yCAAAA,I,6CAAAA,I,uCAAAA,I,2CAAAA,I,qCAAAA,I,yCAAAA,I,yCAAAA,I,iDAAAA,I,2CAAAA,I,gDAAAA,I,4CAAAA,I,gDAAAA,I,8CAAAA,I,sCAAAA,I,kCAAAA,I,8DAAAA,I,sCAAAA,I,8CAAAA,I,4EAAAA,I,oCAAAA,I,kEAAAA,I,sDAAAA,I,0DAAAA,I,gDAAAA,I,4DAAAA,I,4DAAAA,I,4CAAAA,I,8CAAAA,I,gEAAAA,I,0CAAAA,I,0DAAAA,I,sDAAAA,I,0DAAAA,I,kEAAAA,I,sDAAAA,I,sDAAAA,I,4DAAAA,I,gEAAAA,I,wEAAAA,I,sDAAAA,I,kDAAAA,I,4EAAAA,I,8DAAAA,I,wEAAAA,I,0DAAAA,I,sDAAAA,I,gDAAAA,I,4EAAAA,I,sCAAAA,I,wDAAAA,I,4FAAAA,I,gDAAAA,I,4EAAAA,I,4EAAAA,I,0DAAAA,I,gHAAAA,I,0DAAAA,I,8DAAAA,I,gHAAAA,I,4EAAAA,I,kDAAAA,I,gDAAAA,I,gFAAAA,I,oCAAAA,I,kHAAAA,I,oDAAAA,I,0FAAAA,I,8DAAAA,I,oEAAAA,I,0CAAAA,I,4GAAAA,I,kEAAAA,I,gDAAAA,I,8FAAAA,I,0DAAAA,I,8EAAAA,I,wDAAAA,I,8FAAAA,I,4FAAAA,I,8HAAAA,I,8EAAAA,I,0DAAAA,I,wCAAAA,I,kBAAAA,I,oGAAAA,I,kBAAAA,I,kBAAAA,I,0FAAAA,I,0DAAAA,I,kEAAAA,I,sGAAAA,I,yCAAAA,M,cAoGAC,K,cAAAA,E,UAAAA,E,cAAAA,E,cAAAA,E,gBAAAA,E,wBAAAA,E,gBAAAA,E,gBAAAA,E,cAAAA,E,uBAAAA,M,cA+CAC,O,eAAAA,I,mBAAAA,I,eAAAA,I,qBAAAA,I,mBAAAA,I,iBAAAA,I,uBAAAA,I,mBAAAA,I,eAAAA,I,qBAAAA,I,kBAAAA,I,gBAAAA,I,gBAAAA,I,4BAAAA,I,kCAAAA,I,8BAAAA,I,oBAAAA,I,sBAAAA,I,oCAAAA,I,gDAAAA,I,kCAAAA,I,0BAAAA,I,gDAAAA,I,gCAAAA,I,6DAAAA,M,cA+HAC,O,eAAAA,I,aAAAA,I,2CAAAA,I,qCAAAA,I,2BAAAA,I,qCAAAA,I,+BAAAA,I,oBAAAA,M,cAYAC,K,YAAAA,E,4BAAAA,E,mBAAAA,E,uBAAAA,E,cAAAA,E,kBAAAA,E,yBAAAA,E,yBAAAA,E,sBAAAA,E,YAAAA,E,sCAAAA,E,gBAAAA,E,2BAAAA,E,gBAAAA,E,2BAAAA,E,qBAAAA,E,gCAAAA,E,yBAAAA,E,oCAAAA,E,uBAAAA,E,uBAAAA,E,iCAAAA,E,YAAAA,E,kBAAAA,E,uBAAAA,E,YAAAA,E,gBAAAA,E,gBAAAA,E,cAAAA,E,2BAAAA,E,oCAAAA,E,qBAAAA,M,cAkGAC,O,aAAAA,I,uBAAAA,I,iBAAAA,I,eAAAA,I,qBAAAA,I,6CAAAA,I,2BAAAA,I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","file":"static/js/main.f5707c2b.chunk.js","sourcesContent":["import { CardType, Controller, PlayState, Zone } from \"./enums\";\r\nimport { Game, State } from \"./Game\";\r\n\r\nexport interface Player {\r\n  id: number;\r\n  fatigue: number;\r\n  heroID: number | null;\r\n  mana: number;\r\n  name: string;\r\n  maximumMana: number;\r\n  playState: PlayState;\r\n  type: CardType.Player;\r\n  zone: Zone;\r\n}\r\n\r\ninterface CraftPlayerProps {\r\n  name?: string;\r\n  mana?: number;\r\n  heroID?: number;\r\n  maximumMana?: number;\r\n  zone?: Zone;\r\n}\r\n\r\nexport const craftPlayer = (props: CraftPlayerProps = {}): Player =>\r\n  ({\r\n    id: 0,\r\n    fatigue: 0,\r\n    mana: 0,\r\n    maximumMana: 0,\r\n    name: \"Player\",\r\n    playState: PlayState.Playing,\r\n    zone: Zone.Play,\r\n    ...props,\r\n    type: CardType.Player\r\n  } as Player);\r\n\r\nexport const craftOpponent = (props: CraftPlayerProps = {}): Player =>\r\n  ({\r\n    id: 1,\r\n    fatigue: 0,\r\n    mana: 0,\r\n    name: \"Opponent\",\r\n    maximumMana: 0,\r\n    playState: PlayState.Playing,\r\n    zone: Zone.Play,\r\n    ...props,\r\n    type: CardType.Player\r\n  } as Player);\r\n\r\nexport const canSpendMana = (player: Player, amount: number) =>\r\n  player.mana - amount >= 0;\r\n\r\nexport const otherId = (state: State): Controller =>\r\n  state.activePlayer === state.playerID ? state.opponentID : state.playerID;\r\n// export const other = (playerID: Controller): Controller =>\r\n//   playerID === Controller.Player ? Controller.Opponent : Controller.Player;\r\n\r\nexport const getActivePlayer = (game: Game) =>\r\n  game.play[game.state.activePlayer] as Player;\r\n\r\nexport const getPlayer = (game: Game) =>\r\n  game.play[game.state.playerID] as Player;\r\n\r\nexport const getOpponent = (game: Game) =>\r\n  game.play[game.state.opponentID] as Player;\r\n\r\nexport const hasLost = (player: Player) => player.playState === PlayState.Lost;\r\nexport const hasWon = (player: Player) => player.playState === PlayState.Won;\r\n","import { CardType } from \"./enums\";\r\n\r\nexport const MAX_MANA = 10;\r\nexport const MAX_HEALTH = 30;\r\nexport const MAX_CARDS_IN_HAND = 10;\r\nexport const PLAYABLE_CARDS = [\r\n  CardType.Minion,\r\n  CardType.Weapon,\r\n  CardType.Hero,\r\n  CardType.Spell\r\n];\r\n","// NOTE: some of these enums have been copied from https://github.com/HearthSim/SabberStone\r\n\r\nexport enum Ability {\r\n  Adapt = \"Adapt\",\r\n  Battlecry = \"Battlecry\",\r\n  Charge = \"Charge\",\r\n  ChooseOne = \"Choose one\",\r\n  Combo = \"Combo\",\r\n  Counter = \"Counter\",\r\n  DeathRattle = \"Deathrattle\",\r\n  Discover = \"Discover\",\r\n  DivineShield = \"Divine shield\",\r\n  Enrage = \"Enrage\",\r\n  Freeze = \"Freeze\",\r\n  Immune = \"Immune\",\r\n  Inspire = \"Inspire\",\r\n  Overload = \"Overload\",\r\n  Poisonous = \"Poisonous\",\r\n  Quest = \"Quest\",\r\n  Secret = \"Secret\",\r\n  Silence = \"Silence\",\r\n  Stealth = \"Stealth\",\r\n  Taunt = \"Taunt\",\r\n  Windfury = \"Windfury\"\r\n}\r\n\r\nexport enum BlockType {\r\n  Attack = \"ATTACK\",\r\n  Joust = \"JOUST\",\r\n  Continuous = \"CONTINUOUS\",\r\n  Power = \"POWER\",\r\n  Script = \"SCRIPT\",\r\n  Trigger = \"TRIGGER\",\r\n  Deaths = \"DEATHS\",\r\n  Play = \"PLAY\",\r\n  Fatigue = \"FATIGUE\",\r\n  Ritual = \"RITUAL\",\r\n  RevealCard = \"REVEAL_CARD\",\r\n  GameReset = \"GAME_RESET\",\r\n  MoveMinion = \"MOVE_MINION\",\r\n  Action = \"ACTION\"\r\n}\r\n\r\nexport enum CardClass {\r\n  Invalid = \"INVALID\",\r\n  DeathKnight = \"DEATHKNIGHT\",\r\n  Druid = \"DRUID\",\r\n  Hunter = \"HUNTER\",\r\n  Mage = \"MAGE\",\r\n  Paladin = \"PALADIN\",\r\n  Priest = \"PRIEST\",\r\n  Rogue = \"ROGUE\",\r\n  Shaman = \"SHAMAN\",\r\n  Warlock = \"WARLOCK\",\r\n  Warrior = \"WARRIOR\",\r\n  Dream = \"DREAM \",\r\n  Neutral = \"NEUTRAL\"\r\n}\r\n\r\nexport enum CardType {\r\n  Minion = \"MINION\",\r\n  Weapon = \"WEAPON\",\r\n  Hero = \"HERO\",\r\n  Enchantment = \"ENCHANTMENT\",\r\n  Spell = \"SPELL\",\r\n  HeroPower = \"HERO_POWER\",\r\n  Player = \"PLAYER\"\r\n}\r\n\r\nexport type Controller = number;\r\n\r\n/* export enum Controller {\r\n  Player = \"PLAYER\",\r\n  Opponent = \"OPPONENT\"\r\n}*/\r\n\r\nexport enum PlayState {\r\n  Invalid = \"INVALID\",\r\n  Playing = \"PLAYING\",\r\n  // Winning = \"WINNING\",\r\n  // Losing = \"LOSING\",\r\n  Won = \"WON\",\r\n  Lost = \"LOST\",\r\n  Tied = \"TIED\" // TODO\r\n  // Disconnected = \"DISCONNECTED\",\r\n  // Conceded = \"CONCEDED\",\r\n  // Quit = \"QUIT\"\r\n}\r\n\r\nexport enum Step {\r\n  Invalid = \"INVALID\",\r\n  BeginFirst = \"BEGIN_FIRST\",\r\n  BeginShuffle = \"BEGIN_SHUFFLE\",\r\n  BeginDraw = \"BEGIN_DRAW\",\r\n  BeginMulligan = \"BEGIN_MULLIGAN\",\r\n  MainBegin = \"MAIN_BEGIN\",\r\n  MainReady = \"MAIN_READY\",\r\n  MainResource = \"MAIN_RESOURCE\",\r\n  MainDraw = \"MAIN_DRAW\",\r\n  MainStart = \"MAIN_START\",\r\n  MainAction = \"MAIN_ACTION\",\r\n  MainCombat = \"MAIN_COMBAT\",\r\n  MainEnd = \"MAIN_END\",\r\n  MainNext = \"MAIN_NEXT\",\r\n  FinalWrapUp = \"FINAL_WRAPUP\",\r\n  FinalGameOver = \"FINAL_GAMEOVER\",\r\n  MainCleanup = \"MAIN_CLEANUP\",\r\n  MainStartTriggers = \"MAIN_START_TRIGGERS\"\r\n}\r\n\r\nexport enum Zone {\r\n  Invalid = \"INVALID\",\r\n  Play = \"PLAY\",\r\n  Deck = \"DECK\",\r\n  Hand = \"HAND\",\r\n  Graveyard = \"GRAVEYARD\",\r\n  RemovedFromGame = \"REMOVEDFROMGAME\",\r\n  SetAside = \"SETASIDE\",\r\n  Secret = \"SECRET\"\r\n}\r\n\r\nexport enum EntityType {\r\n  Invalid = \"INVALID\",\r\n\r\n  /**\r\n   All cards on the stack\r\n   */\r\n  Stack = \"STACK\",\r\n\r\n  /**\r\n   The target\r\n   */\r\n  Target = \"TARGET\",\r\n\r\n  /**\r\n   The source\r\n   */\r\n  Source = \"SOURCE\",\r\n\r\n  /**\r\n   Player's heroID\r\n   */\r\n  Hero = \"HERO\",\r\n\r\n  /**\r\n   Player's heroID power\r\n   */\r\n  HeroPower = \"HERO_POWER\",\r\n\r\n  /**\r\n   Opponent's heroID power\r\n   */\r\n  OpHeroPower = \"OP_HERO_POWER\",\r\n\r\n  /**\r\n   The target of the current event. (e.g. the defender, the target of a spell, or the just damaged or healed\r\n   character)\r\n   */\r\n  EventTarget = \"EVENT_TARGET\",\r\n\r\n  /**\r\n   The source of the current event. (e.g. the attacker, the played card, or the just damaging or healing entity)\r\n   */\r\n  EventSource = \"EVENT_SOURCE\",\r\n\r\n  /**\r\n   The top card from the playerID's deck\r\n   */\r\n  TopCardFromDeck = \"TOPCARDFROMDECK\",\r\n\r\n  /**\r\n   The top card from the opponentID's deck\r\n   */\r\n  OpTopDeck = \"OP_TOPDECK\",\r\n\r\n  /**\r\n   All cards in the playerID's hand\r\n   */\r\n  Hand = \"HAND\",\r\n\r\n  /**\r\n   All cards in the playerID's deck\r\n   */\r\n  Deck = \"DECK\",\r\n\r\n  /**\r\n   Player's secrets\r\n   */\r\n  Secrets = \"SECRETS\",\r\n\r\n  /**\r\n   Player's minions\r\n   */\r\n  Minions = \"MINIONS\",\r\n\r\n  /**\r\n   Player's minions except the source\r\n   */\r\n  MinionsNoSource = \"MINIONS_NOSOURCE\",\r\n\r\n  /**\r\n   All friends characters\r\n   */\r\n  Friends = \"FRIENDS\",\r\n\r\n  /**\r\n   Opponent's Hero\r\n   */\r\n  OpHero = \"OP_HERO\",\r\n\r\n  /**\r\n   All cards in the opponentID's hand\r\n   */\r\n  OpHand = \"OP_HAND\",\r\n\r\n  /**\r\n   All cards in the opponentID's deck\r\n   */\r\n  OpDeck = \"OP_DECK\",\r\n\r\n  /**\r\n   All opponentID secret\r\n   */\r\n  OpSecrets = \"OP_SECRETS\",\r\n\r\n  /**\r\n   All opponentID minion\r\n   */\r\n  OpMinions = \"OP_MINIONS\",\r\n\r\n  /**\r\n   All opponentID character\r\n   */\r\n  Enemies = \"ENEMIES\",\r\n\r\n  /**\r\n   All opponentID character except the source\r\n   */\r\n  EnemiesNoTarget = \"ENEMIES_NOTARGET\",\r\n\r\n  /**\r\n   All characters\r\n   */\r\n  All = \"ALL\",\r\n\r\n  /**\r\n   All characters except the source\r\n   */\r\n  AllNoSource = \"ALL_NOSOURCE\",\r\n\r\n  /**\r\n   Player's weapon\r\n   */\r\n  Weapon = \"WEAPON\",\r\n\r\n  /**\r\n   Opponent's weapon\r\n   */\r\n  OpWeapon = \"OP_WEAPON\",\r\n\r\n  /**\r\n   All minions\r\n   */\r\n  AlLMinions = \"ALLMINIONS\",\r\n\r\n  /**\r\n   All minions except the source\r\n   */\r\n  AllMinionsNoSource = \"ALLMINIONS_NOSOURCE\",\r\n\r\n  /**\r\n   All cards in the graveyard\r\n   */\r\n  Graveyard = \"GRAVEYARD\",\r\n\r\n  /**\r\n   All heroes\r\n   */\r\n  Heroes = \"HEROES\",\r\n\r\n  /**\r\n   The Controller entity of the playerID\r\n   */\r\n  Controller = \"CONTROLLER\",\r\n\r\n  /**\r\n   The Controller entity of the opponentID.\r\n   */\r\n  OpController = \"OP_CONTROLLER\",\r\n\r\n  /**\r\n   The cards have been discarded from the playerID's hand.\r\n   */\r\n  Discarded = \"DISCARDED\"\r\n}\r\n\r\nexport enum PlayReq {\r\n  REQ_MINION_TARGET = 1,\r\n  REQ_FRIENDLY_TARGET = 2,\r\n  REQ_ENEMY_TARGET = 3,\r\n  REQ_DAMAGED_TARGET = 4,\r\n  REQ_MAX_SECRETS = 5,\r\n  REQ_FROZEN_TARGET = 6,\r\n  REQ_CHARGE_TARGET = 7,\r\n  REQ_TARGET_MAX_ATTACK = 8,\r\n  REQ_NONSELF_TARGET = 9,\r\n  REQ_TARGET_WITH_RACE = 10,\r\n  REQ_TARGET_TO_PLAY = 11,\r\n  REQ_NUM_MINION_SLOTS = 12,\r\n  REQ_WEAPON_EQUIPPED = 13,\r\n  REQ_ENOUGH_MANA = 14,\r\n  REQ_YOUR_TURN = 15,\r\n  REQ_NONSTEALTH_ENEMY_TARGET = 16,\r\n  REQ_HERO_TARGET = 17,\r\n  REQ_SECRET_ZONE_CAP = 18,\r\n  REQ_MINION_CAP_IF_TARGET_AVAILABLE = 19,\r\n  REQ_MINION_CAP = 20,\r\n  REQ_TARGET_ATTACKED_THIS_TURN = 21,\r\n  REQ_TARGET_IF_AVAILABLE = 22,\r\n  REQ_MINIMUM_ENEMY_MINIONS = 23,\r\n  REQ_TARGET_FOR_COMBO = 24,\r\n  REQ_NOT_EXHAUSTED_ACTIVATE = 25,\r\n  REQ_UNIQUE_SECRET_OR_QUEST = 26,\r\n  REQ_TARGET_TAUNTER = 27,\r\n  REQ_CAN_BE_ATTACKED = 28,\r\n  REQ_ACTION_PWR_IS_MASTER_PWR = 29,\r\n  REQ_TARGET_MAGNET = 30,\r\n  REQ_ATTACK_GREATER_THAN_0 = 31,\r\n  REQ_ATTACKER_NOT_FROZEN = 32,\r\n  REQ_HERO_OR_MINION_TARGET = 33,\r\n  REQ_CAN_BE_TARGETED_BY_SPELLS = 34,\r\n  REQ_SUBCARD_IS_PLAYABLE = 35,\r\n  REQ_TARGET_FOR_NO_COMBO = 36,\r\n  REQ_NOT_MINION_JUST_PLAYED = 37,\r\n  REQ_NOT_EXHAUSTED_HERO_POWER = 38,\r\n  REQ_CAN_BE_TARGETED_BY_OPPONENTS = 39,\r\n  REQ_ATTACKER_CAN_ATTACK = 40,\r\n  REQ_TARGET_MIN_ATTACK = 41,\r\n  REQ_CAN_BE_TARGETED_BY_HERO_POWERS = 42,\r\n  REQ_ENEMY_TARGET_NOT_IMMUNE = 43,\r\n  REQ_ENTIRE_ENTOURAGE_NOT_IN_PLAY = 44,\r\n  REQ_MINIMUM_TOTAL_MINIONS = 45,\r\n  REQ_MUST_TARGET_TAUNTER = 46,\r\n  REQ_UNDAMAGED_TARGET = 47,\r\n  REQ_CAN_BE_TARGETED_BY_BATTLECRIES = 48,\r\n  REQ_STEADY_SHOT = 49,\r\n  REQ_MINION_OR_ENEMY_HERO = 50,\r\n  REQ_TARGET_IF_AVAILABLE_AND_DRAGON_IN_HAND = 51,\r\n  REQ_LEGENDARY_TARGET = 52,\r\n  REQ_FRIENDLY_MINION_DIED_THIS_TURN = 53,\r\n  REQ_FRIENDLY_MINION_DIED_THIS_GAME = 54,\r\n  REQ_ENEMY_WEAPON_EQUIPPED = 55,\r\n  REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_FRIENDLY_MINIONS = 56,\r\n  REQ_TARGET_WITH_BATTLECRY = 57,\r\n  REQ_TARGET_WITH_DEATHRATTLE = 58,\r\n  REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_FRIENDLY_SECRETS = 59,\r\n  REQ_SECRET_ZONE_CAP_FOR_NON_SECRET = 60,\r\n  REQ_TARGET_EXACT_COST = 61,\r\n  REQ_STEALTHED_TARGET = 62,\r\n  REQ_MINION_SLOT_OR_MANA_CRYSTAL_SLOT = 63,\r\n  REQ_MAX_QUESTS = 64,\r\n  REQ_TARGET_IF_AVAILABE_AND_ELEMENTAL_PLAYED_LAST_TURN = 65,\r\n  REQ_TARGET_NOT_VAMPIRE = 66,\r\n  REQ_TARGET_NOT_DAMAGEABLE_ONLY_BY_WEAPONS = 67,\r\n  REQ_NOT_DISABLED_HERO_POWER = 68,\r\n  REQ_MUST_PLAY_OTHER_CARD_FIRST = 69,\r\n  REQ_HAND_NOT_FULL = 70,\r\n  REQ_TARGET_IF_AVAILABLE_AND_NO_3_COST_CARD_IN_DECK = 71,\r\n  REQ_CAN_BE_TARGETED_BY_COMBOS = 72,\r\n  REQ_CANNOT_PLAY_THIS = 73,\r\n  REQ_FRIENDLY_MINIONS_OF_RACE_DIED_THIS_GAME = 74,\r\n  REQ_DRAG_TO_PLAY_PRE29933 = 75,\r\n  REQ_OPPONENT_PLAYED_CARDS_THIS_GAME = 77,\r\n  REQ_LITERALLY_UNPLAYABLE = 78,\r\n  REQ_TARGET_IF_AVAILABLE_AND_HERO_HAS_ATTACK = 79,\r\n  REQ_FRIENDLY_MINION_OF_RACE_DIED_THIS_TURN = 80,\r\n  REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_SPELLS_PLAYED_THIS_TURN = 81,\r\n  REQ_FRIENDLY_MINION_OF_RACE_IN_HAND = 82,\r\n  REQ_DRAG_TO_PLAY_PRE31761 = 83,\r\n  REQ_MANA_CRYSTAL = 84,\r\n  REQ85 = 85,\r\n  REQ_FRIENDLY_DEATHRATTLE_MINION_DIED_THIS_GAME = 86,\r\n  REQ87 = 87,\r\n  REQ88 = 88,\r\n  REQ_FRIENDLY_REBORN_MINION_DIED_THIS_GAME = 89,\r\n  REQ_MINION_DIED_THIS_GAME = 90,\r\n  REQ_BOARD_NOT_COMPLETELY_FULL = 92,\r\n  REQ_TARGET_IF_AVAILABLE_AND_HAS_OVERLOADED_MANA = 93,\r\n  REQ_DRAG_TO_PLAY = 94\r\n}\r\n\r\n/**\r\n * Another classification for cards which is mutual exclusive.\r\n * The most used value is DRAGON, since a lot of cards interact with\r\n * dragons in hand.\r\n */\r\nexport enum Race {\r\n  Blank = \"BLANK\",\r\n  All = \"ALL\",\r\n  Beast = \"BEAST\",\r\n  Demon = \"DEMON\",\r\n  DRAGON = \"DRAGON\",\r\n  Mechanical = \"MECHANICAL\",\r\n  Murloc = \"MURLOC\",\r\n  Pirate = \"PIRATE\",\r\n  Totem = \"TOTEM\",\r\n  Elemental = \"ELEMENTAL\"\r\n}\r\n\r\n// export enum Race {\r\n//   INVALID = 0,\r\n//   BLOODELF = 1,\r\n//   DRAENEI = 2,\r\n//   DWARF = 3,\r\n//   GNOME = 4,\r\n//   GOBLIN = 5,\r\n//   HUMAN = 6,\r\n//   NIGHTELF = 7,\r\n//   ORC = 8,\r\n//   TAUREN = 9,\r\n//   TROLL = 10,\r\n//   UNDEAD = 11,\r\n//   WORGEN = 12,\r\n//   GOBLIN2 = 13,\r\n//   MURLOC = 14,\r\n//   DEMON = 15,\r\n//   SCOURGE = 16,\r\n//   MECHANICAL = 17,\r\n//   ELEMENTAL = 18,\r\n//   OGRE = 19,\r\n//   BEAST = 20,\r\n//   TOTEM = 21,\r\n//   NERUBIAN = 22,\r\n//   PIRATE = 23,\r\n//   DRAGON = 24,\r\n//   BLANK = 25,\r\n//   ALL = 26,\r\n//   EGG = 38\r\n// }\r\n\r\n/**\r\n Indicates which (group of) entities the effect will influence.\r\n */\r\nexport enum PowerArea {\r\n  /**\r\n   There will be no effect.\r\n   */\r\n  NONE,\r\n\r\n  /**\r\n   The effect will be triggered by the selected target (target chosen by playerID).\r\n   */\r\n  TARGET,\r\n\r\n  /**\r\n   The effect will be triggered by the heroID of the controller.\r\n   */\r\n  HERO,\r\n\r\n  /**\r\n   The effect will be triggered by the heroID of the opponentID controller.\r\n   */\r\n  OP_HERO,\r\n\r\n  /**\r\n   The effect will be triggered by the heroID of all controllers.\r\n   */\r\n  HEROES,\r\n\r\n  /**\r\n   The effect will be triggered by the board of the controller.\r\n   */\r\n  BOARD,\r\n\r\n  /**\r\n   The effect will be triggered by the board of the opponentID controller.\r\n   */\r\n  OP_BOARD,\r\n\r\n  /**\r\n   The effect will be triggered by the board of all controllers.\r\n   */\r\n  BOARDS,\r\n\r\n  /**\r\n   The effect will be triggered by the hand of the controller.\r\n   */\r\n  HAND,\r\n\r\n  /**\r\n   The effect will be triggered by the hand of the opponentID controller.\r\n   */\r\n  OP_HAND,\r\n\r\n  /**\r\n   The effect will be triggered by the hand of all controllers.\r\n   */\r\n  HANDS,\r\n\r\n  /**\r\n   The effect will be triggered by the entity itself.\r\n   */\r\n  SELF,\r\n\r\n  /**\r\n   The effect will be triggered by the GAME entity.\r\n   */\r\n  GAME,\r\n\r\n  /**\r\n   The effect will be triggered by the controller entity.\r\n   */\r\n  CONTROLLER,\r\n\r\n  /**\r\n   The effect will be triggered by the opponentID controller entity.\r\n   */\r\n  OP_CONTROLLER,\r\n\r\n  /**\r\n   The effect will be triggered by all controller entities.\r\n   */\r\n  CONTROLLERS,\r\n\r\n  /**\r\n   The effect will be triggered by the secrets of the controller.\r\n   */\r\n  SECRET,\r\n\r\n  ///\t<summary>\r\n  ///\tThe effect will be triggered by the secrets of all controllers.\r\n  ///\t</summary>\r\n  SECRETS,\r\n\r\n  /**\r\n   The effect will be triggered by the HAND and BOARD of the controller.\r\n   */\r\n  HAND_AND_BOARD,\r\n\r\n  /**\r\n   The effect will be triggered by the HAND and BOARD of the opponentID controller.\r\n   */\r\n  OP_BOARD_AND_OP_HERO,\r\n\r\n  /**\r\n   The effect will be triggered by the HERO and BOARD of all controllers.\r\n   */\r\n  BOARDS_HEROES,\r\n\r\n  /**\r\n   This effect will be triggered by the GRAVEYARD of the controller.\r\n   */\r\n  GRAVEYARD,\r\n\r\n  /**\r\n   This effect will be triggered by the GRAVEYARD and SECRET of the controller.\r\n   */\r\n  GRAVEYARD_AND_SECRET,\r\n\r\n  /**\r\n   This effect will be triggered by the GRAVEYARD of the opponentID controller.\r\n   */\r\n  OP_GRAVEYARD,\r\n\r\n  /**\r\n   This effect will be triggered by the GRAVEYARD and SECRET of the opponentID controller.\r\n   */\r\n  OP_GRAVEYARD_AND_OP_SECRET\r\n}\r\n\r\nexport enum TargetingType {\r\n  None,\r\n  All,\r\n  FriendlyCharacters,\r\n  EnemyCharacters,\r\n  AllMinions,\r\n  FriendlyMinions,\r\n  EnemyMinions,\r\n  Heroes\r\n}\r\n\r\n/* Events in Hearthstone.*/\r\nexport enum TriggerType {\r\n  None = \"NONE\",\r\n\r\n  MultiTrigger = \"MULTITRIGGER\",\r\n\r\n  /* The effect will be triggered at the end of turn.*/\r\n  TurnEnd = \"TURN_END\",\r\n\r\n  /* The effect will be triggered at the start of turn.*/\r\n  TurnStart = \"TURN_START\",\r\n\r\n  /* The effect will be triggered when a minion dies.*/\r\n  Death = \"DEATH\",\r\n\r\n  /* The effect will be triggered after a playerID uses Hero Power.*/\r\n  Inspire = \"INSPIRE\",\r\n\r\n  /* The effect will be triggered when a character is damaged.*/\r\n  DealDamage = \"DEAL_DAMAGE\",\r\n\r\n  /* The effect will be triggered when a spell or a character deals damages.*/\r\n  TakeDamage = \"TAKE_DAMAGE\",\r\n  /* \r\n  effect will be triggered when a character gets Predamage. \r\n  This event happens just before the character is actually damaged.\r\n  */\r\n  PreDamage = \"PREDAMAGE\",\r\n\r\n  /* The effect will be triggered when characters are healed.*/\r\n  Heal = \"HEAL\",\r\n\r\n  /* The effect will be triggered when a minion loses its Divine Shield*/\r\n  LoseDivineShield = \"LOSE_DIVINE_SHIELD\",\r\n\r\n  /* The effect will be triggered when characters attack.*/\r\n  Attack = \"ATTACK\",\r\n\r\n  /* The effect will be triggered after an attack action is ended.*/\r\n  AfterAttack = \"AFTER_ATTACK\",\r\n\r\n  /* The effect will be triggered whenever a minion is summoned*/\r\n  Summon = \"SUMMON\",\r\n  /* The effect will be triggered after a minion is summoned.*/\r\n  AfterSummon = \"AFTER_SUMMON\",\r\n\r\n  /* The effect will be triggered when a playerID plays a card.*/\r\n  PlayCard = \"PLAY_CARD\",\r\n\r\n  /* The effect will be triggered after a playerID plays a card.*/\r\n  AfterPlayCard = \"AFTER_PLAY_CARD\",\r\n  /* The effect will be triggered when a playerID plays a Minion card.*/\r\n  PlayMinion = \"PLAY_MINION\",\r\n\r\n  /* The effect will be triggered after a minion is played.*/\r\n  AfterPlayMinion = \"AFTER_PLAY_MINION\",\r\n\r\n  /* The effect will be triggered when a playerID plays a Spell card.*/\r\n  CastSpell = \"CAST_SPELL\",\r\n\r\n  /* The effect will be triggered after a spell is played.*/\r\n  AfterCast = \"AFTER_CAST\",\r\n\r\n  /* The effect will be triggered when a secret is activated.*/\r\n  SecretRevealed = \"SECRET_REVEALED\",\r\n  /* The effect will be triggered when an entity enters any types of zone.*/\r\n  Zone = \"ZONE\",\r\n\r\n  /* The effect will be triggered when a card is discarded from hand.*/\r\n  Discard = \"DISCARD\",\r\n\r\n  /* The effect will be triggered when a game begins.*/\r\n  GameStart = \"GAME_START\",\r\n  /* The effect will be triggered when a card is drawed.*/\r\n  Draw = \"DRAW\",\r\n\r\n  /* The effect will be triggered when a card is targeted by an attacking minion or a played card.*/\r\n  Target = \"TARGET\",\r\n\r\n  /* The effect will be triggered when a entity is frozen.*/\r\n  Frozen = \"FROZEN\",\r\n\r\n  /* The effect will be triggered when a heroID gains armor.*/\r\n  Armor = \"ARMOR\",\r\n\r\n  /* The effect will be triggered when a heroID equips a weapon.*/\r\n  EquipWeapon = \"EQUIP_WEAPON\",\r\n\r\n  /* The effect will be triggered when a card is shuffled into a deck.*/\r\n  ShuffleIntoDeck = \"SHUFFLE_INTO_DECK\",\r\n\r\n  Overload = \"OVERLOAD\"\r\n\r\n  // \"WORGEN_TRANSFORM\"\r\n}\r\n\r\n/*\r\nTypes of entity that can invoke an event.\r\n*/\r\nexport enum TriggerSource {\r\n  ALL,\r\n  FRIENDLY,\r\n  ENEMY,\r\n  SELF,\r\n  MINIONS,\r\n  MINIONS_EXCEPT_SELF,\r\n  OP_MINIONS,\r\n  ALL_MINIONS,\r\n  ALL_MINIONS_EXCEPT_SELF,\r\n  HERO,\r\n  OP_HERO,\r\n  ENCHANTMENT_TARGET,\r\n  WEAPON,\r\n  HERO_POWER,\r\n  FRIENDLY_SPELL_CASTED_ON_THE_OWNER,\r\n  FRIENDLY_SPELL_CASTED_ON_OWN_MINIONS,\r\n  FRIENDLY_EVENT_SOURCE,\r\n  ADJACENT_TO_THE_OWNER\r\n}\r\n\r\n/*\r\nIndicates where this trigger should be activated.\r\n*/\r\nexport enum TriggerActivation {\r\n  PLAY,\r\n  HAND,\r\n  DECK,\r\n  HAND_OR_PLAY\r\n}\r\n\r\n/*\r\nTypes of event sequences in Hearthstone.\r\n*/\r\nexport enum SequenceType {\r\n  None,\r\n  PlayCard,\r\n  PlayMinion,\r\n  PlaySpell,\r\n  Summon,\r\n  DamageDealt,\r\n  Attack,\r\n  Target\r\n}\r\n\r\nexport enum PlayType {\r\n  PlayerPlay,\r\n  PlayerDraw,\r\n  PlayerGet,\r\n  PlayerMulligan,\r\n  PlayerHandDiscard,\r\n  PlayerDeckDiscard,\r\n  PlayerBackToHand,\r\n  PlayerSecretPlayed,\r\n  PlayerHeroPower,\r\n  PlayerPlayToDeck,\r\n  PlayerGetToDeck,\r\n  OpponentPlay,\r\n  OpponentDraw,\r\n  OpponentGet,\r\n  OpponentMulligan,\r\n  OpponentHandDiscard,\r\n  OpponentDeckDiscard,\r\n  OpponentPlayToDeck,\r\n  OpponentBackToHand,\r\n  OpponentSecretPlayed,\r\n  OpponentSecretTriggered,\r\n  OpponentHeroPower,\r\n  OpponentGetToDeck\r\n}\r\n","import _ from \"lodash/fp\";\r\nimport { hasWindfury } from \"./Card\";\r\nimport { Hero } from \"./Hero\";\r\nimport { Minion } from \"./Minion\";\r\nimport { EntityContainer, isCharacter, isHero } from \"./Entity\";\r\nimport { CharacterContainer } from \"./Container\";\r\n\r\nexport type Character = Hero | Minion;\r\n\r\n// export const getCharacter = (id: number, game: Game): Character => {\r\n//   const entity = game.play[id];\r\n//\r\n//   if (entity.type === CardType.Hero || entity.type === CardType.Minion)\r\n//     return entity;\r\n//\r\n//   throw new Error(`Entity ${id} is not a character.`);\r\n// };\r\n\r\nexport const getCharacters = (entities: EntityContainer) =>\r\n  _.pickBy(isCharacter, entities) as CharacterContainer;\r\nexport const getCharactersById = (container: EntityContainer, ids: number[]) =>\r\n  _.pick<EntityContainer>(ids, container) as CharacterContainer;\r\n\r\nexport const isExhausted = (char: Character) => char.exhausted;\r\n\r\nexport const canAttack = (character: Character): boolean => {\r\n  if (isHero(character) && !character.weaponID) return false;\r\n\r\n  return character.attack > 0 && !character.exhausted;\r\n};\r\n\r\nexport const shouldExhaust = (character: Character): boolean => {\r\n  const maxAttacks = hasWindfury(character) ? 2 : 1;\r\n\r\n  return character.attacksPerformed >= maxAttacks;\r\n};\r\n","import { EntityContainer } from \"./Entity\";\r\nimport { Controller, Step } from \"./enums\";\r\nimport { CardContainer } from \"./Container\";\r\n\r\nexport type State = {\r\n  activePlayer: Controller;\r\n  step: Step;\r\n  playerID: Controller;\r\n  opponentID: Controller;\r\n  playerHeroID: number;\r\n  opponentHeroID: number;\r\n  turn: number;\r\n};\r\n\r\nexport type Game = {\r\n  deck: CardContainer;\r\n  graveyard: EntityContainer;\r\n  hand: CardContainer;\r\n  play: EntityContainer;\r\n  secret: EntityContainer;\r\n  setAside: EntityContainer;\r\n  state: State;\r\n};\r\n\r\n// export const getHand = (game: Game) =>\r\n//   _.pickBy(card => card.zone === Zone.Hand, game.cards) as EntityContainer;\r\n//\r\n// export const getDeck = (game: Game) =>\r\n//   _.pickBy(card => card.zone === Zone.Deck, game.cards) as EntityContainer;\r\n//\r\n// export const getBoard = (game: Game) =>\r\n//   _.pickBy<Entity>(\r\n//     entity => entity.type === CardType.Minion,\r\n//     game.entities\r\n//   ) as MinionContainer;\r\n\r\nexport const isGameOver = ({ step }: State) => step === Step.FinalGameOver;\r\n","import _ from \"lodash/fp\";\r\nimport { Character } from \"./Character\";\r\nimport { Abilities } from \"./Abilities\";\r\nimport { newId } from \"./utils\";\r\nimport { Game } from \"./Game\";\r\nimport { Playable } from \"./Playable\";\r\nimport { CardClass, CardType, Controller, Zone } from \"./enums\";\r\nimport { isHero } from \"./Entity\";\r\nimport { MAX_HEALTH } from \"./constants\";\r\n\r\nexport interface Hero extends Playable {\r\n  armor: number;\r\n  type: CardType.Hero;\r\n  weaponID: number | null;\r\n}\r\n\r\ninterface CraftHeroProps {\r\n  cardID: string;\r\n  name: string;\r\n  owner: Controller;\r\n\r\n  cardClass?: CardClass;\r\n  abilities?: Abilities;\r\n  armor?: number;\r\n  attack?: number;\r\n  attacksPerformed?: number;\r\n  exhausted?: boolean;\r\n  health?: number;\r\n  maxHealth?: number;\r\n  weaponId?: number;\r\n  zone?: Zone;\r\n}\r\n\r\nexport const craftHero = (props: CraftHeroProps): Hero =>\r\n  ({\r\n    abilities: [],\r\n    armor: 0,\r\n    attack: 0,\r\n    attacksPerformed: 0,\r\n    cost: 0,\r\n    destroyed: false,\r\n    exhausted: false,\r\n    health: props.maxHealth || MAX_HEALTH,\r\n    id: newId(),\r\n    maxHealth: 30,\r\n    zone: Zone.Play,\r\n    cardClass: CardClass.Neutral,\r\n    weaponID: null,\r\n    ...props,\r\n    type: CardType.Hero\r\n  } as Hero);\r\n\r\nexport const reduceArmor = (hero: Hero, damage: number): number =>\r\n  Math.max(0, hero.armor - damage);\r\n\r\nexport const reduceHealth = (character: Character, damage: number): number =>\r\n  Math.min(\r\n    character.health,\r\n    isHero(character)\r\n      ? character.health + character.armor - damage\r\n      : character.health - damage\r\n  );\r\n\r\nexport const getPlayerHero = (game: Game): Hero =>\r\n  game.play[game.state.playerHeroID] as Hero;\r\n\r\nexport const getOpponentHero = (game: Game): Hero =>\r\n  game.play[game.state.opponentHeroID] as Hero;\r\n","import _ from \"lodash/fp\";\r\nimport { Abilities } from \"./Abilities\";\r\nimport { hasTaunt } from \"./Card\";\r\nimport { Character } from \"./Character\";\r\nimport { EntityContainer, entitiesFrom } from \"./Entity\";\r\nimport { CardType, Controller, Race, Zone } from \"./enums\";\r\nimport { Playable } from \"./Playable\";\r\nimport { newId } from \"./utils\";\r\nimport { CharacterContainer, MinionContainer } from \"./Container\";\r\nimport { Game } from \"./Game\";\r\n\r\nexport interface Minion extends Playable {\r\n  attack: number;\r\n  race: Race;\r\n  type: CardType.Minion;\r\n}\r\n\r\ninterface CraftMinionProps {\r\n  attack: number;\r\n  cardID: string;\r\n  maxHealth: number;\r\n  name: string;\r\n  owner: Controller;\r\n  cost: number;\r\n  zone: Zone;\r\n\r\n  abilities?: Abilities;\r\n  attacksPerformed?: number;\r\n  exhausted?: boolean;\r\n  health?: number;\r\n  race?: Race;\r\n  text?: string;\r\n}\r\n\r\nconst selectMinions = _.curry(\r\n  (controller: Controller, container: EntityContainer) =>\r\n    _.pickBy(\r\n      _.whereEq({ owner: controller, type: CardType.Minion }),\r\n      container\r\n    ) as MinionContainer\r\n);\r\nexport const playerMinions = (game: Game) =>\r\n  selectMinions(game.state.playerID, game.play);\r\nexport const opponentMinions = (game: Game) =>\r\n  selectMinions(game.state.opponentID, game.play);\r\n\r\n// const selectMinions = (controller: Controller) => (\r\n//   container: MinionContainer\r\n// ) => _.pickBy(_.whereEq({ owner: controller }), container) as MinionContainer;\r\n\r\n// export const playerMinions = selectMinions(Controller.Player);\r\n// export const opponentMinions = selectMinions(Controller.Opponent);\r\n\r\nexport const craftMinion = (props: CraftMinionProps): Minion =>\r\n  ({\r\n    abilities: [],\r\n    attacksPerformed: 0,\r\n    destroyed: false,\r\n    exhausted: true,\r\n    health: props.maxHealth,\r\n    race: Race.Blank,\r\n    ...props,\r\n    id: newId(),\r\n    type: CardType.Minion\r\n  } as Minion);\r\n\r\nexport const craftMinions = (...props: CraftMinionProps[]) =>\r\n  entitiesFrom(_.map(craftMinion, props) as Minion[]) as MinionContainer;\r\n\r\nexport const minionsFromContainer = (entities: EntityContainer) =>\r\n  _.pickBy(_.whereEq({ type: CardType.Minion }), entities) as MinionContainer;\r\n\r\nexport const ownerMinions = _.curry(\r\n  (player: Controller, minions: MinionContainer) =>\r\n    _.pickBy(_.whereEq({ owner: player }), minions) as MinionContainer\r\n);\r\n\r\nexport const anyTaunts = (minions: MinionContainer) => _.any(hasTaunt, minions);\r\n\r\nexport const isValidTarget = (\r\n  character: Character,\r\n  characters: MinionContainer\r\n) => (anyTaunts(characters) ? hasTaunt(character) : true);\r\n","import _ from \"lodash/fp\";\r\nimport { Abilities } from \"./Abilities\";\r\nimport { CardClass, CardType, Controller, Zone } from \"./enums\";\r\nimport { newId } from \"./utils\";\r\nimport { Game } from \"./Game\";\r\nimport { entitiesFrom } from \"./Entity\";\r\nimport { WeaponContainer } from \"./Container\";\r\nimport { Playable } from \"./Playable\";\r\n\r\nexport interface Weapon extends Playable {\r\n  attack: number;\r\n  durability: number;\r\n  name: string;\r\n  heroId: number;\r\n  type: CardType.Weapon;\r\n}\r\n\r\ninterface CraftWeaponProps {\r\n  abilities?: Abilities;\r\n  attack: number;\r\n  cardID: string;\r\n  cost: number;\r\n  durability: number;\r\n  heroId: number;\r\n  name: string;\r\n  owner: Controller;\r\n  zone: Zone;\r\n\r\n  text?: string;\r\n}\r\n\r\nexport const craftWeapon = (props: CraftWeaponProps): Weapon =>\r\n  ({\r\n    abilities: [],\r\n    cardClass: CardClass.Neutral,\r\n    ...props,\r\n    id: newId(),\r\n    type: CardType.Weapon\r\n  } as Weapon);\r\n\r\nexport const craftWeapons = (...props: CraftWeaponProps[]): WeaponContainer =>\r\n  entitiesFrom(_.map(craftWeapon, props) as Weapon[]) as WeaponContainer;\r\n\r\nexport const getWeapon = (id: number | null, game: Game) =>\r\n  (id ? game.play[id] : null) as Weapon | null;\r\n// export const getWeapon = _.curry(\r\n//   (id: number, game: Game) => game.play[id] as Weapon\r\n// );\r\n","module.exports = __webpack_public_path__ + \"static/media/cardback.d534b9ee.png\";","import _ from \"lodash/fp\";\r\nimport { Character } from \"./Character\";\r\nimport { Weapon } from \"./Weapon\";\r\nimport { Container } from \"./Container\";\r\nimport { Player } from \"./Player\";\r\nimport { HeroPower } from \"./HeroPower\";\r\nimport { Hero } from \"./Hero\";\r\nimport { CardType } from \"./enums\";\r\nimport { Minion } from \"./Minion\";\r\n\r\nexport type Entity = Player | Character | Weapon | HeroPower;\r\nexport type EntityContainer = Container<Entity>;\r\nexport type EntityPayload<T extends Record<string, any> = {}> = T & {\r\n  id: number;\r\n};\r\n\r\nexport const entitiesFrom = (array: Entity[]): EntityContainer =>\r\n  _.indexBy<Entity>(_.prop(\"id\"), array) as EntityContainer;\r\n\r\nexport const isHero = (entity: Entity): entity is Hero =>\r\n  entity.type === CardType.Hero;\r\n\r\nexport const isMinion = (entity: Entity): entity is Minion =>\r\n  entity.type === CardType.Minion;\r\n\r\nexport const isCharacter = (entity: Entity): entity is Character =>\r\n  isMinion(entity) || isHero(entity);\r\n\r\nexport const isWeapon = (entity: Entity): entity is Weapon =>\r\n  entity.type === CardType.Weapon;\r\n\r\nexport const isPlayer = (entity: Entity): entity is Player =>\r\n  entity.type === CardType.Player;\r\n\r\nexport const isHeroPower = (entity: Entity): entity is HeroPower =>\r\n  entity.type === CardType.HeroPower;\r\n","export * from \"./Abilities\";\r\nexport * from \"./BasicCard\";\r\nexport * from \"./Card\";\r\nexport * from \"./Character\";\r\nexport * from \"./constants\";\r\nexport * from \"./Container\";\r\nexport * from \"./Entity\";\r\nexport * from \"./enums\";\r\nexport * from \"./Game\";\r\nexport * from \"./Hero\";\r\nexport * from \"./HeroPower\";\r\nexport * from \"./Minion\";\r\nexport * from \"./Playable\";\r\nexport * from \"./Player\";\r\nexport * from \"./Weapon\";\r\nexport * from \"./utils\";\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { Weapon, EntityPayload, Minion, Card } from \"../../../models\";\r\n\r\nexport type GainManaPayload = EntityPayload<{\r\n  amount?: number;\r\n}>;\r\nexport type SpendManaPayload = EntityPayload<{\r\n  amount: number;\r\n}>;\r\nexport type EquipWeaponPayload = EntityPayload<{\r\n  weapon: Weapon;\r\n}>;\r\n\r\n// export type DealDamagePayload = EntityPayload<{ amount: number }>;\r\nexport interface DealDamagePayload {\r\n  amount: number;\r\n  ids: number[];\r\n}\r\n\r\nexport type FatigueDamagePayload = EntityPayload<{ heroId: number }>;\r\n\r\nexport const attackCharacter = createAction<EntityPayload>(\"ATTACK_CHARACTER\");\r\nexport const dealDamage = createAction<DealDamagePayload>(\"DEAL_DAMAGE\");\r\nexport const exhaust = createAction<EntityPayload>(\"EXHAUST\");\r\nexport const destroyWeapon = createAction<Weapon>(\"DESTROY_WEAPON\");\r\nexport const equipWeapon = createAction<EquipWeaponPayload>(\"EQUIP_WEAPON\");\r\nexport const gainMana = createAction<GainManaPayload>(\"GAIN_MANA\");\r\nexport const restoreMana = createAction<EntityPayload>(\"RESTORE_MANA\");\r\nexport const spendMana = createAction<SpendManaPayload>(\"SPEND_MANA\");\r\nexport const summonMinion = createAction<Minion>(\"SUMMON_MINION\");\r\nexport const processDeaths = createAction(\"PROCESS_DEATHS\");\r\nexport const fatigueDamage = createAction<FatigueDamagePayload>(\r\n  \"FATIGUE_DAMAGE\"\r\n);\r\n","import { CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  Entity,\r\n  EntityContainer,\r\n  EntityPayload,\r\n  Hero,\r\n  Character,\r\n  Player,\r\n  Minion,\r\n  HeroPower,\r\n  Weapon\r\n} from \"../../models\";\r\n\r\n// TODO: refactor\r\n\r\nexport type Handler<S = Entity, P = EntityPayload> = (\r\n  state: S,\r\n  payload: PayloadAction<P>[\"payload\"]\r\n) => EntityContainer | void | undefined;\r\n\r\nexport type CharacterHandler<T = EntityPayload> = Handler<Character, T>;\r\nexport type PlayerHandler<T = EntityPayload> = Handler<Player, T>;\r\nexport type HeroHandler<T = EntityPayload> = Handler<Hero, T>;\r\nexport type MinionHandler<T = EntityPayload> = Handler<Minion, T>;\r\nexport type HeroPowerHandler<T = EntityPayload> = Handler<HeroPower, T>;\r\nexport type WeaponHandler<T = EntityPayload> = Handler<Weapon, T>;\r\n\r\nexport const getEntity = <\r\n  E extends Entity = Entity,\r\n  P extends EntityPayload = EntityPayload\r\n>(\r\n  handler: Handler<E, P>\r\n): CaseReducer<EntityContainer, PayloadAction<P>> => (state, action) =>\r\n  handler(state[action.payload.id] as E, action.payload);\r\n","import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport _ from \"lodash/fp\";\r\nimport { processDeaths, summonMinion } from \"./actions\";\r\nimport { Minion, EntityContainer, CardType } from \"../../../models\";\r\n\r\nconst processDeathsHandler = (state: EntityContainer) =>\r\n  _.omitBy(\r\n    _.whereEq({ destroyed: true, type: CardType.Minion }),\r\n    state\r\n  ) as EntityContainer;\r\n\r\nconst summonMinionHandler = (\r\n  state: EntityContainer,\r\n  action: PayloadAction<Minion>\r\n) => {\r\n  state[action.payload.id] = action.payload;\r\n};\r\n\r\nexport default createReducer<EntityContainer>(\r\n  {},\r\n  {\r\n    [summonMinion.type]: summonMinionHandler,\r\n    [processDeaths.type]: processDeathsHandler\r\n  }\r\n);\r\n","import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { EntityContainer, Hero, Player, Weapon } from \"../../../models\";\r\nimport {\r\n  destroyWeapon,\r\n  equipWeapon,\r\n  EquipWeaponPayload,\r\n  fatigueDamage,\r\n  FatigueDamagePayload\r\n} from \"./actions\";\r\nimport { getEntity } from \"../../utils\";\r\n\r\nconst destroyWeaponHandler = (\r\n  state: EntityContainer,\r\n  { payload: { heroId, attack } }: PayloadAction<Weapon>\r\n) => {\r\n  const hero = state[heroId] as Hero;\r\n  hero.weaponID = null;\r\n  hero.attack = Math.min(hero.attack - attack, 0);\r\n};\r\n\r\nconst equipWeaponHandler = (\r\n  state: EntityContainer,\r\n  { payload: { weapon } }: PayloadAction<EquipWeaponPayload>\r\n) => {\r\n  const hero = state[weapon.heroId] as Hero;\r\n  hero.attack += weapon.attack;\r\n  hero.weaponID = weapon.id;\r\n};\r\n\r\nconst fatigueDamageHandler = (\r\n  state: EntityContainer,\r\n  { payload }: PayloadAction<FatigueDamagePayload>\r\n) => {\r\n  const hero = state[payload.heroId] as Hero;\r\n  const player = state[payload.id] as Player;\r\n  const dmg = player.fatigue == 0 ? 1 : player.fatigue + 1;\r\n  hero.health -= dmg;\r\n};\r\n\r\nexport default createReducer<EntityContainer>(\r\n  {},\r\n  {\r\n    [destroyWeapon.type]: destroyWeaponHandler,\r\n    [equipWeapon.type]: equipWeaponHandler,\r\n    [fatigueDamage.type]: fatigueDamageHandler\r\n  }\r\n);\r\n","import { createAction, createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\n// import _ from 'lodash/fp';\r\nimport { Card, CardContainer, EntityPayload } from \"../../models\";\r\n\r\nexport const drawCard = createAction<Card>(\"DRAW_CARD\");\r\nexport const burnCard = createAction<EntityPayload>(\"BURN_CARD\");\r\n\r\nconst drawCardHandler = (\r\n  state: CardContainer,\r\n  action: PayloadAction<EntityPayload>\r\n) => {\r\n  delete state[action.payload.id];\r\n};\r\nconst burnCardHandler = (\r\n  state: CardContainer,\r\n  action: PayloadAction<EntityPayload>\r\n) => {\r\n  delete state[action.payload.id];\r\n};\r\n\r\nexport default createReducer(\r\n  {},\r\n  {\r\n    [drawCard.type]: drawCardHandler,\r\n    [burnCard.type]: burnCardHandler\r\n  }\r\n);\r\n","import { craftOpponent, Game } from \"../../models\";\r\nimport _ from \"lodash/fp\";\r\nimport {\r\n  EntityContainer,\r\n  Player,\r\n  CardContainer,\r\n  Hero,\r\n  Ability,\r\n  CardClass,\r\n  Step,\r\n  Zone,\r\n  craftMinions,\r\n  craftWeapons,\r\n  entitiesFrom,\r\n  craftPlayer,\r\n  craftHero\r\n} from \"../../models\";\r\n\r\n// PLAYERS\r\nconst player: Player = craftPlayer({\r\n  mana: 5,\r\n  maximumMana: 5\r\n});\r\nconst opponent: Player = craftOpponent();\r\n\r\n// HEROES\r\nconst playerHero: Hero = craftHero({\r\n  cardClass: CardClass.Shaman,\r\n  cardID: \"HERO_02\",\r\n  name: \"Thrall\",\r\n  owner: player.id\r\n});\r\n\r\nconst opponentHero: Hero = craftHero({\r\n  cardClass: CardClass.Hunter,\r\n  cardID: \"HERO_01\",\r\n  armor: 3,\r\n  name: \"Garrosh\",\r\n  owner: opponent.id\r\n});\r\n\r\nplayer.heroID = playerHero.id;\r\nopponent.heroID = opponentHero.id;\r\n\r\n// MINIONS\r\nconst handMinions = craftMinions(\r\n  {\r\n    abilities: [Ability.Charge],\r\n    attack: 2,\r\n    cardID: \"CS2_173\",\r\n    cost: 2,\r\n    maxHealth: 1,\r\n    name: \"Bluegill Warrior\",\r\n    owner: player.id,\r\n    zone: Zone.Hand\r\n  },\r\n  {\r\n    abilities: [Ability.Windfury],\r\n    attack: 3,\r\n    cardID: \"EX1_587\",\r\n    cost: 4,\r\n    maxHealth: 4,\r\n    name: \"Windspeaker\",\r\n    owner: player.id,\r\n    zone: Zone.Hand\r\n  },\r\n  {\r\n    attack: 6,\r\n    cardID: \"CS2_200\",\r\n    cost: 6,\r\n    maxHealth: 7,\r\n    name: \"Boulderfist Ogre\",\r\n    owner: opponent.id,\r\n    zone: Zone.Hand\r\n  }\r\n);\r\n\r\nconst minions = craftMinions(\r\n  {\r\n    attack: 1,\r\n    cardID: \"CS2_189\",\r\n    cost: 1,\r\n    exhausted: false,\r\n    maxHealth: 1,\r\n    name: \"Elven archer\",\r\n    owner: opponent.id,\r\n    zone: Zone.Play\r\n  },\r\n\r\n  {\r\n    abilities: [Ability.Taunt],\r\n    attack: 2,\r\n    cardID: \"CS2_121\",\r\n    cost: 2,\r\n    exhausted: false,\r\n    maxHealth: 2,\r\n    name: \"Frostwolf Grunt\",\r\n    owner: player.id,\r\n    zone: Zone.Play\r\n  },\r\n  {\r\n    attack: 200,\r\n    cardID: \"CS2_147\",\r\n    cost: 4,\r\n    exhausted: false,\r\n    maxHealth: 4,\r\n    name: \"Gnomish Inventor\",\r\n    owner: player.id,\r\n    zone: Zone.Play\r\n  }\r\n);\r\n\r\n// WEAPONS\r\nconst handWeapons = craftWeapons({\r\n  attack: 3,\r\n  cardID: \"CS2_106\",\r\n  cost: 3,\r\n  durability: 2,\r\n  name: \"Fiery War Axe\",\r\n  owner: opponent.id,\r\n  zone: Zone.Hand,\r\n  heroId: opponentHero.id\r\n});\r\n\r\n// CARDS\r\nconst hand: CardContainer = { ...handMinions, ...handWeapons };\r\n\r\nconst deck = craftMinions(\r\n  {\r\n    attack: 3,\r\n    cardID: \"CS2_172\",\r\n    cost: 2,\r\n    maxHealth: 2,\r\n    name: \"Bloodfen Raptor\",\r\n    owner: player.id,\r\n    zone: Zone.Deck\r\n  },\r\n  {\r\n    attack: 2,\r\n    cardID: \"CS2_141\",\r\n    cost: 3,\r\n    maxHealth: 2,\r\n    name: \"Ironforge Rifleman\",\r\n    owner: player.id,\r\n    zone: Zone.Deck\r\n  },\r\n  {\r\n    attack: 3,\r\n    cardID: \"CS2_125\",\r\n    cost: 3,\r\n    maxHealth: 3,\r\n    name: \"Ironfur Grizzly\",\r\n    owner: player.id,\r\n    zone: Zone.Deck\r\n  },\r\n  {\r\n    attack: 3,\r\n    cardID: \"CS2_182\",\r\n    cost: 4,\r\n    maxHealth: 4,\r\n    name: \"Chillwind Yeti\",\r\n    owner: player.id,\r\n    zone: Zone.Deck\r\n  },\r\n\r\n  {\r\n    abilities: [Ability.Taunt],\r\n    attack: 5,\r\n    cardID: \"CS2_187\",\r\n    cost: 5,\r\n    maxHealth: 4,\r\n    name: \"Booty Bay Bodyguard\",\r\n    owner: opponent.id,\r\n    zone: Zone.Deck\r\n  },\r\n  {\r\n    abilities: [Ability.Taunt],\r\n    attack: 2,\r\n    cardID: \"CS2_121\",\r\n    cost: 2,\r\n    maxHealth: 2,\r\n    name: \"Frostwolf Grunt\",\r\n    owner: opponent.id,\r\n    zone: Zone.Deck\r\n  }\r\n);\r\n\r\n// TODO: refactor\r\nexport const play: EntityContainer = {\r\n  ...entitiesFrom([player, opponent, playerHero, opponentHero]),\r\n  ...minions\r\n};\r\n\r\nconst firstPlayerId = _.sample([player.id, opponent.id]) as number; // TODO: add a coin toss action\r\n\r\nconst initialState: Game = {\r\n  deck,\r\n  hand,\r\n  play,\r\n  graveyard: {},\r\n  secret: {},\r\n  setAside: {},\r\n  state: {\r\n    activePlayer: firstPlayerId,\r\n    step: Step.BeginFirst,\r\n    playerID: player.id,\r\n    opponentID: opponent.id,\r\n    playerHeroID: playerHero.id,\r\n    opponentHeroID: opponentHero.id,\r\n    turn: 1\r\n  }\r\n};\r\n\r\nexport default initialState;\r\n","import _ from \"lodash/fp\";\r\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  AppThunk,\r\n  getActivePlayer,\r\n  getOpponent,\r\n  getPlayer,\r\n  hasLost,\r\n  MAX_CARDS_IN_HAND,\r\n  otherId,\r\n  selectCards,\r\n  State,\r\n  Step\r\n} from \"../../models\";\r\nimport { burnCard, drawCard } from \"./deckReducer\";\r\nimport { fatigueDamage, gainMana, processDeaths, restoreMana } from \"./play/actions\";\r\nimport initialState from \"./initialState\";\r\nimport Toastr from \"toastr\";\r\n\r\nexport const finishGame = createAction(\"FINISH_GAME\");\r\nexport const nextTurn = createAction(\"NEXT_TURN\");\r\n\r\nconst finishGameHandler = (state: State) => {\r\n  state.step = Step.FinalGameOver;\r\n};\r\n\r\nconst nextTurnHandler = (state: State) => {\r\n  state.turn++;\r\n  state.activePlayer = otherId(state);\r\n};\r\n\r\nexport const checkForEndGame = (): AppThunk => (dispatch, getState) => {\r\n  const state = getState();\r\n  const player = getPlayer(state);\r\n  const opponent = getOpponent(state);\r\n\r\n  // if (hasLost(player) || hasWon(player)) {\r\n  if (hasLost(player) || hasLost(opponent)) {\r\n    dispatch(finishGame());\r\n  }\r\n};\r\n\r\nexport const endTurn = (): AppThunk => (dispatch, getState) => {\r\n  dispatch(nextTurn());\r\n  const game = getState();\r\n  const player = getActivePlayer(game);\r\n  const { id } = player;\r\n\r\n  dispatch(gainMana({ id }));\r\n  dispatch(restoreMana({ id }));\r\n\r\n  const deck = _.values(selectCards(id, game.deck));\r\n  const hand = _.values(selectCards(id, game.hand));\r\n\r\n  if (deck.length > 0) {\r\n    const topCard = deck[0];\r\n    if (hand.length === MAX_CARDS_IN_HAND) {\r\n      Toastr.error(`Cant draw more cards from  the deck for ${player.name}!`);\r\n      dispatch(burnCard({ id: topCard.id }));\r\n    } else {\r\n      dispatch(drawCard(topCard));\r\n    }\r\n  } else {\r\n    Toastr.error(`No more cards in the deck for ${player.name}!`);\r\n\r\n    dispatch(fatigueDamage({ id: player.id, heroId: player.heroID as number }));\r\n  }\r\n\r\n  dispatch(processDeaths());\r\n  dispatch(checkForEndGame());\r\n};\r\n\r\nexport default createReducer(\r\n  initialState.state, // TODO: remove\r\n  {\r\n    [nextTurn.type]: nextTurnHandler,\r\n    [finishGame.type]: finishGameHandler\r\n  }\r\n);\r\n","import { createReducer, PayloadAction, Reducer } from \"@reduxjs/toolkit\";\r\nimport reduceReducers from \"reduce-reducers\";\r\nimport _ from \"lodash/fp\";\r\nimport {\r\n  AppThunk,\r\n  Character,\r\n  EntityContainer,\r\n  isHero,\r\n  isMinion,\r\n  shouldExhaust,\r\n  reduceArmor,\r\n  reduceHealth,\r\n  getWeapon,\r\n  getCharacters,\r\n  getCharactersById\r\n} from \"../../../models\";\r\nimport {\r\n  DealDamagePayload,\r\n  attackCharacter,\r\n  dealDamage,\r\n  destroyWeapon,\r\n  exhaust,\r\n  processDeaths\r\n} from \"./actions\";\r\nimport {\r\n  CharacterHandler,\r\n  HeroHandler,\r\n  MinionHandler,\r\n  getEntity\r\n} from \"../../utils\";\r\nimport minionReducer from \"./minionReducer\";\r\nimport heroReducer from \"./heroReducer\";\r\nimport { checkForEndGame, nextTurn } from \"../gameStateReducer\";\r\n\r\nexport interface SourceTargetPayload {\r\n  source: Character;\r\n  target: Character;\r\n}\r\n\r\n// TODO: refactor\r\nexport const performAttack = ({\r\n  target,\r\n  source\r\n}: SourceTargetPayload): AppThunk => (dispatch, getState) => {\r\n  dispatch(attackCharacter({ id: source.id }));\r\n  dispatch(\r\n    dealDamage({\r\n      id: target.id,\r\n      amount: source.attack,\r\n      ids: [target.id]\r\n    })\r\n  );\r\n  const game = getState();\r\n\r\n  if (isMinion(target)) {\r\n    dispatch(\r\n      dealDamage({\r\n        id: source.id,\r\n        amount: target.attack,\r\n        ids: [source.id]\r\n      })\r\n    );\r\n  }\r\n  if (isHero(source) && source.weaponID) {\r\n    const weapon = getWeapon(source.weaponID, game);\r\n    if (weapon && weapon.durability <= 0) {\r\n      dispatch(destroyWeapon(weapon));\r\n    }\r\n  }\r\n\r\n  const attacker = game.play[source.id] as Character;\r\n  if (shouldExhaust(attacker)) {\r\n    dispatch(exhaust({ id: attacker.id }));\r\n  }\r\n\r\n  dispatch(processDeaths());\r\n  dispatch(checkForEndGame());\r\n};\r\n\r\nconst attackCharacterHandler: CharacterHandler = (char: Character) => {\r\n  char.attacksPerformed++;\r\n};\r\n\r\nconst exhaustHandler: CharacterHandler = (char: Character) => {\r\n  char.exhausted = true;\r\n};\r\n\r\nconst damageHeroHandler: HeroHandler<DealDamagePayload> = (\r\n  char,\r\n  { amount }\r\n) => {\r\n  const health = reduceHealth(char, amount);\r\n  char.armor = reduceArmor(char, amount);\r\n  char.destroyed = health <= 0;\r\n  char.health = health;\r\n};\r\n\r\nconst damageMinionHandler: MinionHandler<DealDamagePayload> = (\r\n  char,\r\n  payload\r\n) => {\r\n  const health = reduceHealth(char, payload.amount);\r\n\r\n  char.destroyed = health <= 0;\r\n  char.health = health;\r\n};\r\n\r\nconst dealDamageHandler = (\r\n  state: EntityContainer,\r\n  { payload }: PayloadAction<DealDamagePayload>\r\n) => {\r\n  const chars = getCharactersById(state, payload.ids);\r\n\r\n  _.forEach(\r\n    char =>\r\n      isHero(char)\r\n        ? damageHeroHandler(char, payload)\r\n        : damageMinionHandler(char, payload),\r\n    chars\r\n  );\r\n};\r\n\r\nconst nextTurnHandler = (state: EntityContainer) => {\r\n  const chars = getCharacters(state);\r\n  // _.forEach(_.assign({ attacksPerformed: 0, exhausted: false }), chars);\r\n  // TODO: refactor\r\n  _.forEach(char => {\r\n    char.attacksPerformed = 0;\r\n    char.exhausted = false;\r\n  }, chars);\r\n};\r\n\r\nconst characterReducer = createReducer<EntityContainer>(\r\n  {},\r\n  {\r\n    [exhaust.type]: getEntity(exhaustHandler),\r\n    [attackCharacter.type]: getEntity(attackCharacterHandler),\r\n    [dealDamage.type]: dealDamageHandler,\r\n    [nextTurn.type]: nextTurnHandler\r\n  }\r\n);\r\n\r\nexport default reduceReducers(\r\n  characterReducer,\r\n  minionReducer,\r\n  heroReducer\r\n) as Reducer<EntityContainer>;\r\n","import { useSelector } from \"react-redux\";\r\nimport {\r\n  Game,\r\n  getOpponent,\r\n  getOpponentHero,\r\n  getPlayer,\r\n  getPlayerHero,\r\n  isGameOver,\r\n  minionsFromContainer,\r\n  opponentDeck,\r\n  opponentHand,\r\n  opponentMinions,\r\n  playerDeck,\r\n  playerHand,\r\n  playerMinions\r\n} from \"../models\";\r\n\r\nexport const useGame = () => useSelector((game: Game) => game);\r\nexport const useGameState = () => useSelector((game: Game) => game.state);\r\n// export const useActiveHand = () => useSelector(state => state.hand) as EntityContainer;\r\n\r\nexport const useIsPlayerActive = () =>\r\n  useSelector((game: Game) => game.state.activePlayer === game.state.playerID);\r\nexport const useIsOpponentActive = () =>\r\n  useSelector(\r\n    (game: Game) => game.state.activePlayer === game.state.opponentID\r\n  );\r\n\r\nexport const usePlayer = () => useSelector((game: Game) => getPlayer(game));\r\nexport const useOpponent = () => useSelector((game: Game) => getOpponent(game));\r\n\r\nexport const usePlayerHero = () =>\r\n  useSelector((game: Game) => getPlayerHero(game));\r\nexport const useOpponentHero = () =>\r\n  useSelector((game: Game) => getOpponentHero(game));\r\n\r\nexport const usePlayMinions = () =>\r\n  useSelector((game: Game) => minionsFromContainer(game.play));\r\nexport const usePlayerMinions = () =>\r\n  useSelector((game: Game) => playerMinions(game));\r\nexport const useOpponentMinions = () =>\r\n  useSelector((game: Game) => opponentMinions(game));\r\n\r\nexport const usePlayerHand = () =>\r\n  useSelector((game: Game) => playerHand(game));\r\nexport const useOpponentHand = () =>\r\n  useSelector((game: Game) => opponentHand(game));\r\n\r\nexport const usePlayerDeck = () =>\r\n  useSelector((game: Game) => playerDeck(game));\r\nexport const useOpponentDeck = () =>\r\n  useSelector((game: Game) => opponentDeck(game));\r\n\r\nexport const useIsGameOver = () =>\r\n  useSelector((game: Game) => isGameOver(game.state));\r\n","import { Label, List } from \"semantic-ui-react\";\r\nimport React from \"react\";\r\nimport { Ability } from \"../../models\";\r\n\r\ninterface AbilitiesProps {\r\n  list: Ability[];\r\n}\r\n\r\nconst AbilityList: React.FC<AbilitiesProps> = ({ list }) => {\r\n  if (!list.length) return null;\r\n  return (\r\n    <div>\r\n      <List verticalAlign=\"bottom\">\r\n        {list.map((ability, i) => (\r\n          <List.Item key={i}>\r\n            <Label color={\"black\"} horizontal>\r\n              {ability}\r\n            </Label>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AbilityList;\r\n","import React from \"react\";\r\nimport { Image, ImageProps } from \"semantic-ui-react\";\r\n\r\ninterface CardArtProps extends ImageProps {\r\n  cardID: string;\r\n  resolution?: 256 | 512;\r\n}\r\n\r\nconst CardArt: React.FC<CardArtProps> = ({ cardID, resolution, ...props }) => (\r\n  <Image\r\n    // alt={name}\r\n    circular={true}\r\n    src={`https://art.hearthstonejson.com/v1/${resolution}x/${cardID}.jpg`}\r\n    {...props}\r\n  />\r\n);\r\n\r\nCardArt.defaultProps = {\r\n  resolution: 256\r\n} as Partial<CardArtProps>;\r\n\r\nexport default CardArt;\r\n","import React from \"react\";\r\nimport { Label, List, Popup, Segment } from \"semantic-ui-react\";\r\nimport { AbilityList, CardArt } from \"./index\";\r\nimport { Card as ICard, isMinion, isWeapon } from \"../../models\";\r\n\r\ntype CardProps = {\r\n  active?: boolean;\r\n  card: ICard;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ card, active = true }) => {\r\n  const { attack, cardID, cost, name, text } = card;\r\n\r\n  return (\r\n    <Popup\r\n      trigger={\r\n        <div>\r\n          <List.Header>{name}</List.Header>\r\n\r\n          <Segment basic vertical disabled={!active}>\r\n            <CardArt alt={name} cardID={cardID} size=\"tiny\" centered />\r\n\r\n            <Label attached={\"top left\"} circular size=\"large\" color=\"blue\">\r\n              {cost}\r\n            </Label>\r\n\r\n            <Label attached={\"bottom left\"} circular size=\"large\">\r\n              {attack}\r\n            </Label>\r\n            <Label attached={\"bottom right\"} circular size=\"large\">\r\n              {isMinion(card) && card.maxHealth}\r\n              {isWeapon(card) && card.durability}\r\n            </Label>\r\n          </Segment>\r\n        </div>\r\n      }\r\n      content={\r\n        <div>\r\n          <h4>{name}</h4>\r\n          <p>{text}</p>\r\n          <AbilityList list={card.abilities} />\r\n        </div>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Img from \"../assets/images/cardback.png\";\r\n\r\nconst CardBack: React.FC<Object> = props => (\r\n  <img src={Img} alt=\"Unknown card\" width={100} {...props} />\r\n);\r\n\r\nexport default CardBack;\r\n","import React from \"react\";\r\nimport { Segment, Statistic, Popup } from \"semantic-ui-react\";\r\nimport { Weapon as IWeapon } from \"../../models\";\r\nimport CardArt from \"./CardArt\";\r\n\r\ntype WeaponProps = IWeapon & { disabled: boolean };\r\n\r\nconst Weapon: React.FC<WeaponProps> = ({\r\n  attack,\r\n  cardID,\r\n  disabled,\r\n  durability,\r\n  name,\r\n  text\r\n}) => (\r\n  <Segment circular tertiary={disabled}>\r\n    <Popup\r\n      header={name}\r\n      content={\r\n        <div>\r\n          <CardArt cardID={cardID} />\r\n\r\n          <p>{text}</p>\r\n        </div>\r\n      }\r\n      trigger={\r\n        <Statistic color=\"red\" value={`${attack}/${durability}`} size=\"tiny\" />\r\n      }\r\n    />\r\n  </Segment>\r\n);\r\n\r\nexport default Weapon;\r\n","import React from \"react\";\r\nimport { Grid, Header, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Hero as IHero, Weapon as IWeapon } from \"../../models\";\r\nimport CardArt from \"./CardArt\";\r\nimport Weapon from \"./Weapon\";\r\n\r\ntype HeroProps = IHero & {\r\n  active: boolean;\r\n  isOver: boolean;\r\n  weapon: IWeapon | null;\r\n  mana: number;\r\n  maximumMana: number;\r\n};\r\n\r\nconst Hero: React.FC<HeroProps> = ({\r\n  active,\r\n  exhausted,\r\n  isOver,\r\n  name,\r\n  cardID,\r\n  armor,\r\n  health,\r\n  mana,\r\n  maximumMana,\r\n  weapon\r\n}) => (\r\n  <Grid>\r\n    <Grid.Column width={4} />\r\n    <Grid.Column width={2} verticalAlign=\"middle\">\r\n      {weapon && <Weapon {...weapon} disabled={exhausted} />}\r\n    </Grid.Column>\r\n    <Grid.Column computer={5} tablet={12} mobile={16}>\r\n      <Segment\r\n        raised={isOver}\r\n        tertiary={isOver}\r\n        style={{ padding: \"4px 0\" }}\r\n        color={active ? \"green\" : undefined}\r\n      >\r\n        <Header>{name}</Header>\r\n\r\n        <CardArt cardID={cardID} size=\"tiny\" centered />\r\n\r\n        <Statistic.Group size=\"tiny\" widths={armor > 0 ? 3 : 2}>\r\n          {armor > 0 && <Statistic color=\"blue\" value={armor} label=\"armor\" />}\r\n          <Statistic color=\"green\" value={health} label=\"hp\" />\r\n\r\n          <Statistic\r\n            color=\"blue\"\r\n            value={`${mana}/${maximumMana}`}\r\n            label=\"mana\"\r\n            size=\"tiny\"\r\n          />\r\n        </Statistic.Group>\r\n      </Segment>\r\n    </Grid.Column>\r\n  </Grid>\r\n);\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\n\r\nconst Sleep: React.FC = () => (\r\n  <span>\r\n    z\r\n    <sup>\r\n      z<sup>z</sup>\r\n    </sup>\r\n  </span>\r\n);\r\n\r\nexport default Sleep;\r\n","import React from \"react\";\r\nimport { Label, Popup, Segment, Transition } from \"semantic-ui-react\";\r\nimport Sleep from \"./Sleep\";\r\nimport CardArt from \"./CardArt\";\r\nimport { Minion as IMinion } from \"../../models\";\r\nimport AbilityList from \"./AbilityList\";\r\n\r\ninterface MinionProps extends IMinion {\r\n  active: boolean;\r\n  isOver: boolean;\r\n}\r\n\r\nconst Minion: React.FC<MinionProps> = ({\r\n  active,\r\n  abilities,\r\n  attack,\r\n  cardID,\r\n  exhausted,\r\n  isOver,\r\n  health,\r\n  maxHealth,\r\n  name,\r\n  text\r\n}) => (\r\n  <Popup\r\n    header={name}\r\n    content={text}\r\n    trigger={\r\n      <div>\r\n        <Segment disabled={!active} compact size=\"tiny\" basic vertical>\r\n          <Transition visible={exhausted} animation=\"fade up\" duration=\"1500\">\r\n            <Label floating circular size=\"large\" color=\"green\">\r\n              <Sleep />\r\n            </Label>\r\n          </Transition>\r\n\r\n          <CardArt alt={name} cardID={cardID} size=\"tiny\" />\r\n\r\n          <Label attached={\"bottom left\"} circular size=\"large\">\r\n            {attack}\r\n          </Label>\r\n          <Label\r\n            attached={\"bottom right\"}\r\n            color={health < maxHealth ? \"red\" : undefined}\r\n            circular\r\n            size=\"large\"\r\n          >\r\n            {health}\r\n          </Label>\r\n        </Segment>\r\n\r\n        <AbilityList list={abilities} />\r\n      </div>\r\n    }\r\n  />\r\n);\r\n\r\nexport default Minion;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport {\r\n  canAttack,\r\n  CardType,\r\n  Character,\r\n  isValidTarget,\r\n  Minion as IMinion,\r\n  MinionContainer,\r\n  minionsFromContainer,\r\n  ownerMinions\r\n} from \"../../models\";\r\nimport { performAttack } from \"../../redux/modules/play/characterReducer\";\r\nimport { useGame } from \"../hooks\";\r\nimport { Minion } from \"../components/\";\r\n\r\nexport interface MinionProps {\r\n  character: IMinion;\r\n}\r\n\r\nconst DnDMinion: React.FC<MinionProps> = ({ character }) => {\r\n  const dispatch = useDispatch();\r\n  const { play, state } = useGame();\r\n  const [{ isOver, canDrop }, dropRef] = useDrop({\r\n    accept: [CardType.Minion, CardType.Hero],\r\n    drop: (source: Character, monitor) =>\r\n      dispatch(\r\n        performAttack({\r\n          source,\r\n          target: character\r\n        })\r\n      ),\r\n    canDrop: (target: IMinion) => {\r\n      const enemyMinions = ownerMinions(\r\n        character.owner,\r\n        minionsFromContainer(play)\r\n      ) as MinionContainer;\r\n\r\n      return (\r\n        target.owner !== character.owner &&\r\n        isValidTarget(character, enemyMinions)\r\n      );\r\n    },\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop()\r\n    })\r\n  });\r\n  const [{ canDrag }, dragRef] = useDrag({\r\n    item: character,\r\n    canDrag: monitor => character.owner === state.activePlayer && canAttack(character),\r\n    collect: monitor => ({\r\n      canDrag: monitor.canDrag()\r\n    })\r\n  });\r\n\r\n  return (\r\n    <div ref={dropRef}>\r\n      <div ref={dragRef}>\r\n        <Minion {...character} active={canDrop || canDrag} isOver={isOver} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDMinion;\r\n","import React from \"react\";\r\nimport { List, Segment, Transition } from \"semantic-ui-react\";\r\nimport _ from \"lodash/fp\";\r\nimport { Minion, MinionContainer } from \"../../models\";\r\nimport DnDMinion from \"./DnDMinion\";\r\n\r\nexport interface SideProps {\r\n  active?: boolean;\r\n  board: MinionContainer;\r\n}\r\n\r\nconst Side: React.FC<SideProps> = ({ active, board }) => (\r\n  <Segment basic style={{ minHeight: 120 }} disabled={!active}>\r\n    <Transition.Group\r\n      as={List}\r\n      animation=\"pulse\"\r\n      duration={800}\r\n      relaxed\r\n      horizontal\r\n      size=\"huge\"\r\n    >\r\n      {_.map(\r\n        (minion: Minion) => (\r\n          <List.Item key={minion.id}>\r\n            <DnDMinion character={minion} />\r\n          </List.Item>\r\n        ),\r\n        board\r\n      )}\r\n    </Transition.Group>\r\n  </Segment>\r\n);\r\n\r\nexport default Side;\r\n","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\ninterface NextTurnProps {\r\n  onClick: Function;\r\n  turn: number;\r\n}\r\n\r\nconst NextTurn: React.FC<NextTurnProps> = ({ turn, onClick }) => (\r\n  <Button.Group vertical={true} size=\"large\">\r\n    <Button color=\"green\" basic={true}>\r\n      Turn: {turn}\r\n    </Button>\r\n\r\n    <Button fluid positive onClick={() => onClick()}>\r\n      Finish\r\n    </Button>\r\n  </Button.Group>\r\n);\r\n\r\nexport default NextTurn;\r\n","import React from \"react\";\r\nimport { Segment, SemanticCOLORS, Statistic } from \"semantic-ui-react\";\r\nimport _ from \"lodash/fp\";\r\nimport { CardContainer } from \"../../models\";\r\n\r\nexport interface SideProps {\r\n  deck: CardContainer;\r\n}\r\n\r\nconst deckColor = (deck: CardContainer): SemanticCOLORS =>\r\n  _.size(deck) > 0 ? \"blue\" : \"red\";\r\n\r\nconst Deck: React.FC<SideProps> = ({ deck }) => (\r\n  <Segment basic>\r\n    <Statistic color={deckColor(deck)} value={_.size(deck)} label=\"Cards\" />\r\n  </Segment>\r\n);\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport { Modal, ModalProps, Transition } from \"semantic-ui-react\";\r\nimport { hasLost, Player } from \"../models\";\r\n\r\nexport type EndGameScreenProps = ModalProps & {\r\n  player: Player;\r\n  opponent: Player;\r\n  open: boolean;\r\n};\r\n\r\nconst endGameHeader = (player: Player, opponent: Player): string => {\r\n  if (hasLost(player)) {\r\n    if (hasLost(opponent)) {\r\n      return \"It's a draw!\";\r\n    }\r\n\r\n    return `${opponent.name} has won!`;\r\n  }\r\n  return `${player.name} has won!`;\r\n};\r\n\r\nconst EndGameScreen: React.FC<EndGameScreenProps> = ({\r\n  player,\r\n  opponent,\r\n  open,\r\n  ...props\r\n}) => (\r\n  <Transition animation={\"fly up\"} duration={1500} visible={open}>\r\n    <Modal {...props} open={open}>\r\n      <Modal.Header align={\"center\"}>\r\n        {endGameHeader(player, opponent)}\r\n      </Modal.Header>\r\n      {/*<Modal.Content />*/}\r\n    </Modal>\r\n  </Transition>\r\n);\r\n\r\nexport default EndGameScreen;\r\n","// import _ from \"lodash/fp\";\r\nimport { createAction, createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  AppThunk,\r\n  Card,\r\n  CardContainer,\r\n  canSpendMana,\r\n  getActivePlayer,\r\n  CardType,\r\n  Zone,\r\n  hasCharge\r\n} from \"../../models\";\r\nimport { equipWeapon, spendMana, summonMinion } from \"./play/actions\";\r\nimport { drawCard } from \"./deckReducer\";\r\n\r\nexport const playCard = createAction<Card>(\"PLAY_CARD\");\r\n\r\nexport const playerUseCard = (payload: Card): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  // const heroID = activeHero(state);\r\n  const player = getActivePlayer(state);\r\n  if (!canSpendMana(getActivePlayer(state), payload.cost)) {\r\n    return console.warn(\"Not enough mana!\");\r\n  }\r\n\r\n  dispatch(playCard(payload));\r\n  dispatch(spendMana({ amount: payload.cost, id: player.id }));\r\n\r\n  switch (payload.type) {\r\n    case CardType.Minion:\r\n      const minion = {\r\n        ...payload,\r\n        zone: Zone.Play,\r\n        exhausted: !hasCharge(payload)\r\n      };\r\n      dispatch(summonMinion(minion));\r\n      break;\r\n    case CardType.Weapon:\r\n      dispatch(equipWeapon({ id: payload.id, weapon: payload }));\r\n      return;\r\n    default:\r\n      alert(`Unknown card type: ${payload.type}`);\r\n      throw new Error(\"Not implemented yet!\");\r\n  }\r\n};\r\n\r\nexport const playCardHandler = (\r\n  state: CardContainer,\r\n  action: PayloadAction<Card>\r\n) => {\r\n  // state[action.payload.id].zone = Zone.Graveyard;\r\n  delete state[action.payload.id];\r\n};\r\n\r\nconst drawCardHandler = (state: CardContainer, action: PayloadAction<Card>) => {\r\n  const card = { ...action.payload, zone: Zone.Hand };\r\n  state[action.payload.id] = card;\r\n};\r\n\r\nexport default createReducer<CardContainer>(\r\n  {},\r\n  {\r\n    [playCard.type]: playCardHandler,\r\n    [drawCard.type]: drawCardHandler\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { Card as ICard, getActivePlayer, canSpendMana } from \"../../models\";\r\nimport { useGame } from \"../hooks\";\r\nimport { Card, CardBack } from \"../components\";\r\n\r\nexport interface CardProps {\r\n  active: boolean;\r\n  card: ICard;\r\n}\r\n\r\nexport const DnDCard: React.FC<CardProps> = ({ active, card }) => {\r\n  const game = useGame();\r\n  const player = getActivePlayer(game);\r\n  const [{ canDrag }, drag] = useDrag({\r\n    item: card,\r\n    canDrag: monitor =>\r\n      card.owner === game.state.activePlayer && canSpendMana(player, card.cost),\r\n    collect: monitor => ({\r\n      canDrag: monitor.canDrag()\r\n    })\r\n  });\r\n\r\n  if (!active) return <CardBack />;\r\n\r\n  return (\r\n    <div ref={drag}>\r\n      <Card card={card} active={canDrag} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDCard;\r\n","import React from \"react\";\r\nimport { List, Segment, Transition } from \"semantic-ui-react\";\r\nimport _ from \"lodash/fp\";\r\nimport { Card as ICard, CardContainer } from \"../../models\";\r\nimport DnDCard from \"./DnDCard\";\r\n\r\ninterface HandProps {\r\n  active?: boolean;\r\n  hand: CardContainer;\r\n}\r\n\r\nexport const Hand: React.FC<HandProps> = ({ active = true, hand }) => (\r\n  <Segment disabled={!active} basic>\r\n    <Transition.Group as={List} animation=\"pulse\" horizontal duration={800}>\r\n      {_.map(\r\n        (card: ICard) => (\r\n          <List.Item key={card.id}>\r\n            <List.Content>\r\n              <DnDCard key={card.id} card={card} active={active} />\r\n            </List.Content>\r\n          </List.Item>\r\n        ),\r\n        hand\r\n      )}\r\n    </Transition.Group>\r\n  </Segment>\r\n);\r\n\r\nexport default Hand;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport {\r\n  Hero as IHero,\r\n  CardType,\r\n  Player,\r\n  getWeapon,\r\n  Weapon,\r\n  canAttack,\r\n  Character,\r\n  isValidTarget,\r\n  minionsFromContainer,\r\n  ownerMinions\r\n} from \"../../models\";\r\nimport { performAttack } from \"../../redux/modules/play/characterReducer\";\r\nimport { useGame } from \"../hooks\";\r\nimport { Hero } from \"../components\";\r\n\r\ninterface DnDHeroProps {\r\n  active: boolean;\r\n  hero: IHero;\r\n  player: Player;\r\n}\r\n\r\n/**\r\n * Drag & Drop Hero component\r\n */\r\nconst DnDHero: React.FC<DnDHeroProps> = ({ active, hero, player }) => {\r\n  const game = useGame();\r\n  const dispatch = useDispatch();\r\n  const {\r\n    state: { activePlayer }\r\n  } = game;\r\n  const { mana, maximumMana } = player;\r\n  const { weaponID } = hero;\r\n  const [collectedProps, drag] = useDrag({\r\n    item: hero,\r\n    canDrag: monitor => hero.owner === activePlayer && canAttack(hero)\r\n  });\r\n\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: [CardType.Minion, CardType.Hero],\r\n    drop: (char: Character) =>\r\n      dispatch(\r\n        performAttack({\r\n          source: char,\r\n          target: hero\r\n        })\r\n      ),\r\n    canDrop: (item: Character, monitor) => {\r\n      const enemyMinions = ownerMinions(\r\n        hero.owner,\r\n        minionsFromContainer(game.play)\r\n      );\r\n\r\n      return item.owner !== player.id && isValidTarget(item, enemyMinions);\r\n    },\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver()\r\n    })\r\n  });\r\n  const weapon = getWeapon(weaponID, game);\r\n\r\n  return (\r\n    <div ref={drop}>\r\n      <div ref={drag}>\r\n        <Hero\r\n          {...hero}\r\n          active={active}\r\n          isOver={isOver}\r\n          weapon={weapon}\r\n          mana={mana}\r\n          maximumMana={maximumMana}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDHero;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Divider, Grid, Segment } from \"semantic-ui-react\";\r\nimport classNames from \"classnames\";\r\nimport { Card, canUseCard, PLAYABLE_CARDS } from \"../../models\";\r\nimport Side from \"./Side\";\r\nimport NextTurn from \"./NextTurn\";\r\nimport Deck from \"../Deck/Deck\";\r\nimport EndGameScreen from \"../EndGameScreen\";\r\nimport { endTurn } from \"../../redux/modules/gameStateReducer\";\r\nimport { playerUseCard } from \"../../redux/modules/handReducer\";\r\nimport Hand from \"../Hand/Hand\";\r\nimport DnDHero from \"./DnDHero\";\r\nimport {\r\n  useGameState,\r\n  useIsGameOver,\r\n  useIsOpponentActive,\r\n  useIsPlayerActive,\r\n  useOpponent,\r\n  useOpponentDeck,\r\n  useOpponentHand,\r\n  useOpponentHero,\r\n  useOpponentMinions,\r\n  usePlayer,\r\n  usePlayerDeck,\r\n  usePlayerHand,\r\n  usePlayerHero,\r\n  usePlayerMinions\r\n} from \"../hooks\";\r\n\r\n// TODO: split up\r\nconst Battlefield: React.FC = props => {\r\n  const dispatch = useDispatch();\r\n  const { turn } = useGameState();\r\n  const isPlayer = useIsPlayerActive();\r\n  const isOpponent = useIsOpponentActive();\r\n  const playerHero = usePlayerHero();\r\n  const opponentHero = useOpponentHero();\r\n  const player = usePlayer();\r\n  const opponent = useOpponent();\r\n  const playerMinions = usePlayerMinions();\r\n  const opponentMinions = useOpponentMinions();\r\n  const playerDeck = usePlayerDeck();\r\n  const opponentDeck = useOpponentDeck();\r\n  const playerHand = usePlayerHand();\r\n  const opponentHand = useOpponentHand();\r\n  const isGameOver = useIsGameOver();\r\n\r\n  const [{ isOver, canDrop }, drop] = useDrop({\r\n    accept: PLAYABLE_CARDS,\r\n    drop: (item: Card, monitor) => dispatch(playerUseCard(item)),\r\n    canDrop: (item: Card, monitor) => canUseCard(item, player),\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop()\r\n    })\r\n  });\r\n  const nextTurnHandler = () => dispatch(endTurn());\r\n\r\n  return (\r\n    <Segment style={{ padding: \"0 0.5em\" }}>\r\n      <EndGameScreen\r\n        player={player}\r\n        opponent={opponent}\r\n        open={isGameOver}\r\n        dimmer=\"blurring\"\r\n      />\r\n      <Grid>\r\n        <Grid.Column computer={14} mobile={16}>\r\n          <Hand active={isOpponent} hand={opponentHand} />\r\n          <DnDHero hero={opponentHero} player={opponent} active={isOpponent} />\r\n\r\n          <div ref={drop}>\r\n            <Segment\r\n              basic\r\n              className={classNames({\r\n                \"inverted green raised\": isOver && canDrop\r\n              })}\r\n              style={{ padding: 0 }}\r\n            >\r\n              <Side board={opponentMinions} active={isOpponent} />\r\n              <Divider section={true} style={{ margin: 2 }} />\r\n              <Side board={playerMinions} active={isPlayer} />\r\n            </Segment>\r\n          </div>\r\n\r\n          <DnDHero hero={playerHero} player={player} active={isPlayer} />\r\n          <Hand active={isPlayer} hand={playerHand} />\r\n        </Grid.Column>\r\n\r\n        <Grid.Column\r\n          computer={2}\r\n          mobile={16}\r\n          verticalAlign=\"middle\"\r\n          stretched={true}\r\n        >\r\n          <Deck deck={opponentDeck} />\r\n          <NextTurn onClick={nextTurnHandler} turn={turn} />\r\n          <Deck deck={playerDeck} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Battlefield;\r\n","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  GridRow,\r\n  GridColumn\r\n} from \"semantic-ui-react\";\r\nimport TargetableBattlefield from \"./Play/Battlefield\";\r\nimport * as Toastr from \"toastr\";\r\nimport \"toastr/build/toastr.css\";\r\n\r\nToastr.options.timeOut = 3000; //Change the settings\r\n\r\nconst App: React.FC = props => (\r\n  <Grid>\r\n    <GridRow>\r\n      <GridColumn>\r\n        <Container textAlign=\"center\">\r\n          <Header as=\"h1\" attached={true}>\r\n            <Header.Content\r\n              as={\"a\"}\r\n              href={\"https://github.com/zernie/typescript-redux-card-game\"}\r\n              target=\"_blank\"\r\n            >\r\n              Hearthstone clone written using React and Redux.\r\n            </Header.Content>\r\n          </Header>\r\n\r\n          <DndProvider backend={HTML5Backend}>\r\n            <TargetableBattlefield />\r\n          </DndProvider>\r\n        </Container>\r\n      </GridColumn>\r\n    </GridRow>\r\n  </Grid>\r\n);\r\n\r\nexport default App;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport _ from \"lodash/fp\";\r\nimport {\r\n  fatigueDamage,\r\n  FatigueDamagePayload,\r\n  gainMana,\r\n  GainManaPayload,\r\n  processDeaths,\r\n  restoreMana,\r\n  spendMana,\r\n  SpendManaPayload\r\n} from \"./actions\";\r\nimport {\r\n  AppThunk,\r\n  canSpendMana,\r\n  CardType,\r\n  EntityContainer,\r\n  Hero,\r\n  MAX_MANA,\r\n  Player,\r\n  PlayState,\r\n  Zone\r\n} from \"../../../models\";\r\nimport { getEntity, HeroHandler, PlayerHandler } from \"../../utils\";\r\n\r\nconst gainManaHandler: PlayerHandler<GainManaPayload> = (\r\n  state,\r\n  { amount = 1 }\r\n) => {\r\n  if (state.maximumMana >= MAX_MANA)\r\n    return console.warn(`Cannot gain more than max mana amount (${MAX_MANA}).`);\r\n\r\n  state.maximumMana += amount;\r\n};\r\n\r\nconst restoreManaHandler: PlayerHandler<GainManaPayload> = state => {\r\n  state.mana = state.maximumMana;\r\n};\r\n\r\nconst spendManaHandler: PlayerHandler<SpendManaPayload> = (\r\n  state: Player,\r\n  { amount }\r\n) => {\r\n  if (!canSpendMana(state, amount))\r\n    return console.warn(\r\n      `Cannot spend more than current mana amount (${state.mana}).`\r\n    );\r\n\r\n  state.mana -= amount;\r\n};\r\n\r\n// TODO: refactor\r\nconst processDeathsHandler = (state: EntityContainer) => {\r\n  const destroyedHeroes = _.filter(\r\n    _.whereEq({ destroyed: true, type: CardType.Hero, zone: Zone.Play }),\r\n    state\r\n  ) as Hero[];\r\n\r\n  _.forEach((hero: Hero) => {\r\n    const player = state[hero.owner] as Player;\r\n    if (hero.destroyed) {\r\n      player.playState = PlayState.Lost;\r\n    }\r\n  }, destroyedHeroes);\r\n};\r\n\r\nconst fatigueDamageHandler: PlayerHandler<FatigueDamagePayload> = player => {\r\n  player.fatigue++;\r\n};\r\n\r\nexport default createReducer<EntityContainer>(\r\n  {},\r\n  {\r\n    [gainMana.type]: getEntity(gainManaHandler),\r\n    [restoreMana.type]: getEntity(restoreManaHandler),\r\n    [spendMana.type]: getEntity(spendManaHandler),\r\n    [processDeaths.type]: processDeathsHandler,\r\n    [fatigueDamage.type]: getEntity(fatigueDamageHandler)\r\n  }\r\n);\r\n","import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  Character,\r\n  EntityContainer,\r\n  EntityPayload,\r\n  isMinion,\r\n  Weapon\r\n} from \"../../../models\";\r\nimport {\r\n  attackCharacter,\r\n  destroyWeapon,\r\n  equipWeapon,\r\n  EquipWeaponPayload\r\n} from \"./actions\";\r\n\r\nconst equipWeaponHandler = (\r\n  state: EntityContainer,\r\n  action: PayloadAction<EquipWeaponPayload>\r\n) => {\r\n  state[action.payload.id] = action.payload.weapon;\r\n};\r\n\r\nconst destroyWeaponHandler = (\r\n  state: EntityContainer,\r\n  action: PayloadAction<EntityPayload>\r\n) => {\r\n  delete state[action.payload.id];\r\n};\r\n\r\nconst attackCharacterHandler = (\r\n  state: EntityContainer,\r\n  { payload }: PayloadAction<EntityPayload>\r\n) => {\r\n  const char = state[payload.id] as Character;\r\n\r\n  if (isMinion(char)) return;\r\n\r\n  const weapon = char.weaponID && (state[char.weaponID] as Weapon);\r\n  if (!weapon) return;\r\n  weapon.durability--;\r\n};\r\n\r\nexport default createReducer(\r\n  {},\r\n  {\r\n    [destroyWeapon.type]: destroyWeaponHandler,\r\n    [equipWeapon.type]: equipWeaponHandler,\r\n    [attackCharacter.type]: attackCharacterHandler\r\n  }\r\n);\r\n","import { Reducer } from \"@reduxjs/toolkit\";\r\nimport reduceReducers from \"reduce-reducers\";\r\nimport { EntityContainer } from \"../../../models\";\r\nimport characterReducer from \"./characterReducer\";\r\nimport playerReducer from \"./playerReducer\";\r\nimport weaponReducer from \"./weaponReducer\";\r\n\r\nexport default reduceReducers(\r\n  characterReducer,\r\n  weaponReducer,\r\n  playerReducer\r\n) as Reducer<EntityContainer>;\r\n","import gameStateReducer from \"./gameStateReducer\";\r\nimport deckReducer from \"./deckReducer\";\r\nimport handReducer from \"./handReducer\";\r\nimport playReducer from \"./play/playReducer\";\r\nimport graveyardReducer from \"./graveyardReducer\";\r\nimport secretReducer from \"./secretReducer\";\r\nimport setAsideReducer from \"./setAsideReducer\";\r\n\r\nexport default {\r\n  deck: deckReducer,\r\n  graveyard: graveyardReducer,\r\n  hand: handReducer,\r\n  play: playReducer,\r\n  secret: secretReducer,\r\n  setAside: setAsideReducer,\r\n  state: gameStateReducer\r\n};\r\n","// import _ from \"lodash/fp\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\n// TODO\r\nexport default createReducer({}, {});\r\n","// import _ from \"lodash/fp\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\n// TODO\r\nexport default createReducer({}, {});\r\n","// import _ from \"lodash/fp\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\n// TODO\r\nexport default createReducer({}, {});\r\n","import React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport App from \"./UI/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./redux/configureStore\";\r\n// import { getPlayerHero } from \"./Hero\";\r\n// import { gainMana, restoreMana } from './UI/Play/actions';\r\n// import { Game, getBoard, getDeck, getHand } from '../Game';\r\n\r\nconst store = configureStore();\r\n// TODO: refactor\r\n// const playerID = getPlayerHero(store.getState() as Game);\r\n// store.dispatch(gainMana({ id: playerID.id }));\r\n// store.dispatch(restoreMana({ id: playerID.id }));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n// registerServiceWorker();\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./modules/rootReducer\";\r\nimport initialState from \"./modules/initialState\";\r\nimport { Game } from \"../models/Game\";\r\n\r\nexport default () =>\r\n  configureStore<Game>({\r\n    reducer: rootReducer,\r\n    preloadedState: initialState\r\n  });\r\n","// import _ from \"lodash/fp\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { Game } from \"./Game\";\r\nimport { Action } from \"redux\";\r\n\r\nlet _lastId = 0;\r\nexport const newId = (): number => new Date().getTime() + _lastId++;\r\n\r\nexport type AppThunk = ThunkAction<void, Game, null, Action<string>>;\r\n","import _ from \"lodash/fp\";\r\nimport { Ability, Controller, Zone } from \"./enums\";\r\nimport { Weapon } from \"./Weapon\";\r\nimport { HeroPower } from \"./HeroPower\";\r\nimport { Character } from \"./Character\";\r\nimport { CardContainer } from \"./Container\";\r\nimport { Game } from \"./Game\";\r\nimport { canSpendMana, Player } from \"./Player\";\r\n\r\n// TODO: deprecate in favor of Entity?\r\nexport type Card = Character | Weapon | HeroPower;\r\n\r\n// FIXME\r\n// export const selectCards = _.curry((playerID: number, cards: CardContainer) =>\r\n//   _.pickBy((card: Card) => card.owner === playerID, cards)\r\n// );\r\n//\r\n// export const playerHand = selectCards(Controller.Player);\r\n// export const opponentHand = selectCards(Controller.Opponent);\r\n\r\nexport const selectCards = _.curry(\r\n  (player: Controller, cards: CardContainer) =>\r\n    _.pickBy((card: Card) => card.owner === player, cards) as CardContainer\r\n);\r\n\r\nexport const playerHand = (game: Game) =>\r\n  selectCards(game.state.playerID, game.hand);\r\nexport const opponentHand = (game: Game) =>\r\n  selectCards(game.state.opponentID, game.hand);\r\n\r\nexport const playerDeck = (game: Game) =>\r\n  selectCards(game.state.playerID, game.deck);\r\nexport const opponentDeck = (game: Game) =>\r\n  selectCards(game.state.opponentID, game.deck);\r\n\r\nexport const cardListFrom = (array: Card[]) =>\r\n  _.indexBy<Card>(_.prop(\"id\"), array) as CardContainer;\r\n\r\nexport const hasAbility = (ability: Ability) => (entity: Card): boolean =>\r\n  _.contains(ability, entity.abilities) as boolean;\r\n\r\nexport const hasTaunt = hasAbility(Ability.Taunt);\r\nexport const hasCharge = hasAbility(Ability.Charge);\r\nexport const hasWindfury = hasAbility(Ability.Windfury);\r\n\r\nexport const canUseCard = (card: Card, player: Player) =>\r\n  card.zone === Zone.Hand && canSpendMana(player, card.cost);\r\n"],"sourceRoot":""}